{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "workspace": {
            "type": "String"
        },
     "analytic-id": {
        "type": "string",
        "defaultValue": "3873cecc-cd5c-48ce-b59b-3c8dfdff0a87",
        "minLength": 1,
        "metadata": {
        "description": "Unique id for the scheduled alert rule"
      }
    }
    },
"resources": [
        {
            "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',parameters('analytic-id'))]",
            "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
            "kind": "Scheduled",
            "apiVersion": "2021-10-01",
            "properties": {
                "displayName": "NOBELIUM IOCs related to FoggyWeb backdoor",
                "description": "Identifies a match across various data feeds for IOCs related to FoggyWeb backdoor by the threat actor NOBELIUM. FoggyWeb is a passive and highly targeted backdoor capable of remotely exfiltrating sensitive information from a compromised AD FS server. It can also receive additional malicious components from a command-and-control (C2) server and execute them on the compromised server. Reference: https://aka.ms/nobelium-foggy-web",
                "severity": "High",
                "enabled": true,
                "query": "let iocs = externaldata(DateAdded:string,IoC:string,Type:string,TLP:string) [@'https://raw.githubusercontent.com/Azure/Azure-Sentinel/master/Sample%20Data/Feeds/FoggyWebIOC.csv'] with (format='csv', ignoreFirstRecord=True);\rlet sha256Hashes = (iocs | where Type == 'sha256' | project IoC);\rlet FilePaths = (iocs | where Type =~ 'FilePath' | project IoC);\rlet POST_URI = (iocs | where Type =~ 'URI1' | project IoC);\rlet GET_URI = (iocs | where Type =~ 'URI2' | project IoC);\r//Include in the list below, the ADFS servers you know about in your environment.  In the next part of the query, we will try to identify them for you if you have the telemetry.\rlet ADFS_Servers1 = datatable(Computer:string)\r[ '<ADFS01>.<DOMAIN>.<COM>',\r'<ADFS02>.<DOMAIN>.<COM>'\r];\r// Automatically identify potential ADFS services in your environment by searching process event telemetry for 'Microsoft.IdentityServer.ServiceHost.exe'.\rlet ADFS_Servers2 = \r(union isfuzzy=true\r(SecurityEvent\r| where EventID == 4688 and SubjectLogonId != '0x3e4'\r| where ProcessName has 'Microsoft.IdentityServer.ServiceHost.exe'\r| distinct Computer\r),\r(DeviceProcessEvents\r| where InitiatingProcessFileName == 'Microsoft.IdentityServer.ServiceHost.exe'\r| extend Computer = DeviceName\r| distinct Computer\r),\r(Event\r| where Source == 'Microsoft-Windows-Sysmon'\r| where EventID == 1\r| extend EventData = parse_xml(EventData).DataItem.EventData.Data\r| mv-expand bagexpansion=array EventData\r| evaluate bag_unpack(EventData)\r| extend Key=tostring(['@Name']), Value=['#text']\r| evaluate pivot(Key, any(Value), TimeGenerated, Source, EventLog, Computer, EventLevel, EventLevelName, UserName, RenderedDescription, MG, ManagementGroupName, Type, _ResourceId)\r| extend process = split(Image, '\\', -1)[-1]\r| where process =~ 'Microsoft.IdentityServer.ServiceHost.exe'\r| distinct Computer\r)\r);\rlet ADFS_Servers =\rADFS_Servers1\r| union  (ADFS_Servers2 | distinct Computer);\r(union isfuzzy=true\r(DeviceNetworkEvents\r| where DeviceName in (ADFS_Servers)\r| where isnotempty(InitiatingProcessSHA256) or isnotempty(InitiatingProcessFolderPath)\r| where  InitiatingProcessSHA256 has_any (sha256Hashes) or InitiatingProcessFolderPath has_any (FilePaths)\r| project TimeGenerated, ActionType, DeviceId, DeviceName, InitiatingProcessAccountDomain, InitiatingProcessAccountName, InitiatingProcessCommandLine, InitiatingProcessFolderPath, InitiatingProcessId,  InitiatingProcessParentFileName, InitiatingProcessFileName, RemoteIP, RemoteUrl, RemotePort, LocalIP, Type\r| extend timestamp = TimeGenerated, IPCustomEntity = RemoteIP, HostCustomEntity = DeviceName\r),\r(Event\r| where Source == 'Microsoft-Windows-Sysmon' and EventID == '7'\r| where Computer in (ADFS_Servers)\r| extend EvData = parse_xml(EventData)\r| extend EventDetail = EvData.DataItem.EventData.Data\r| extend ImageLoaded = EventDetail.[5].['#text'], Hashes = EventDetail.[11].['#text']\r| parse Hashes with * 'SHA256=' SHA256 '',' *\r| where ImageLoaded has_any (FilePaths) or SHA256 has_any (sha256Hashes) \r| project TimeGenerated, EventDetail, UserName, Computer, Type, Source, SHA256, ImageLoaded, EventID\r| extend Type = strcat(Type,':',EventID, ': ', Source), Account = UserName, FileHash = SHA256, Image = EventDetail.[4].['#text'] \r| extend timestamp = TimeGenerated, HostCustomEntity = Computer , AccountCustomEntity = Account, ProcessCustomEntity = tostring(split(Image, '\\', -1)[-1]), AlgorithmCustomEntity = 'SHA256', FileHashCustomEntity = FileHash\r),\r(CommonSecurityLog\r| where FileHash in (sha256Hashes)\r| project TimeGenerated,  Message, SourceUserID, FileHash, Type\r| extend timestamp = TimeGenerated, AlgorithmCustomEntity = 'SHA256', FileHashCustomEntity = FileHash\r),\r(DeviceEvents\r| where DeviceName in (ADFS_Servers)\r| extend FilePath = strcat(FolderPath, '\\', FileName)\r| where InitiatingProcessSHA256 has_any (sha256Hashes) or FilePath has_any (FilePaths)\r| project TimeGenerated, ActionType, DeviceId, DeviceName, InitiatingProcessAccountDomain, InitiatingProcessAccountName, InitiatingProcessCommandLine, InitiatingProcessFolderPath, InitiatingProcessId, InitiatingProcessParentFileName, InitiatingProcessFileName, InitiatingProcessSHA256, Type\r| extend Account = InitiatingProcessAccountName, Computer = DeviceName, CommandLine = InitiatingProcessCommandLine, FileHash = InitiatingProcessSHA256, Image = InitiatingProcessFolderPath\r| extend timestamp = TimeGenerated, HostCustomEntity = Computer , AccountCustomEntity = Account, ProcessCustomEntity = InitiatingProcessFileName, AlgorithmCustomEntity = 'SHA256', FileHashCustomEntity = FileHash\r),\r(DeviceFileEvents\r| where DeviceName in (ADFS_Servers)\r| where FolderPath has_any (FilePaths) or SHA256 has_any (sha256Hashes)\r| project TimeGenerated, ActionType, DeviceId, DeviceName, InitiatingProcessAccountDomain, InitiatingProcessAccountName, InitiatingProcessCommandLine, InitiatingProcessFolderPath, InitiatingProcessId, InitiatingProcessParentFileName, InitiatingProcessFileName, InitiatingProcessSHA256, Type\r| extend Account = InitiatingProcessAccountName, Computer = DeviceName, CommandLine = InitiatingProcessCommandLine, FileHash = InitiatingProcessSHA256, Image = InitiatingProcessFolderPath\r| extend timestamp = TimeGenerated, HostCustomEntity = Computer , AccountCustomEntity = Account, ProcessCustomEntity = InitiatingProcessFileName, AlgorithmCustomEntity = 'SHA256', FileHashCustomEntity = FileHash\r),\r(DeviceImageLoadEvents\r| where DeviceName in (ADFS_Servers)\r| where FolderPath has_any (FilePaths) or SHA256 has_any (sha256Hashes)\r| project TimeGenerated, ActionType, DeviceId, DeviceName, InitiatingProcessAccountDomain, InitiatingProcessAccountName, InitiatingProcessCommandLine, InitiatingProcessFolderPath, InitiatingProcessId, InitiatingProcessParentFileName, InitiatingProcessFileName, InitiatingProcessSHA256, Type\r| extend Account = InitiatingProcessAccountName, Computer = DeviceName, CommandLine = InitiatingProcessCommandLine, FileHash = InitiatingProcessSHA256, Image = InitiatingProcessFolderPath\r| extend timestamp = TimeGenerated, HostCustomEntity = Computer , AccountCustomEntity = Account, ProcessCustomEntity = InitiatingProcessFileName, AlgorithmCustomEntity = 'SHA256', FileHashCustomEntity = FileHash\r),\r(Event\r| where Source == 'Microsoft-Windows-Sysmon'\r| where Computer in (ADFS_Servers)\r| extend EvData = parse_xml(EventData)\r| extend EventDetail = EvData.DataItem.EventData.Data\r| parse EventDetail with * 'SHA256=' SHA256 '',' *\r| where EventDetail has_any (sha256Hashes) \r| project TimeGenerated, EventDetail, UserName, Computer, Type, Source, SHA256\r| extend Type = strcat(Type, ': ', Source), Account = UserName, FileHash = SHA256, Image = EventDetail.[4].['#text'] \r| extend timestamp = TimeGenerated, HostCustomEntity = Computer , AccountCustomEntity = Account, ProcessCustomEntity = tostring(split(Image, '\\', -1)[-1]), AlgorithmCustomEntity = 'SHA256', FileHashCustomEntity = FileHash\r),\r(W3CIISLog \r| where ( csMethod == 'GET' and csUriStem has_any (GET_URI)) or (csMethod == 'POST' and csUriStem has_any (POST_URI))\r| summarize StartTime = max(TimeGenerated), EndTime = min(TimeGenerated), cIP_MethodCount = count() \rby cIP, cIP_MethodCountType = 'Count of repeated entries, this is to reduce rowsets returned', csMethod, \rcsHost, scStatus, sIP, csUriStem, csUriQuery, csUserName, csUserAgent, csCookie, csReferer\r| extend timestamp = StartTime, IPCustomEntity = cIP, HostCustomEntity = csHost, AccountCustomEntity = csUserName\r),\r(imFileEvent\r| where DvcHostname in (ADFS_Servers)\r| where TargetFileSHA256 has_any (sha256Hashes) or FilePath has_any (FilePaths)\r| extend Account = ActorUsername, Computer = DvcHostname, IPAddress = SrcIpAddr, CommandLine = ActingProcessCommandLine, FileHash = TargetFileSHA256\r| project Type, TimeGenerated, Computer, Account, IPAddress, CommandLine, FileHash\r)\r)",
                "queryFrequency": "PT6H",
                "queryPeriod": "PT6H",
                "triggerOperator": "GreaterThan",
                "triggerThreshold": 0,
                "suppressionDuration": "PT5H",
                "suppressionEnabled": false,
                "entityMappings": [{"entityType":"Account","fieldMappings":[{"identifier":"FullName","columnName":"AccountCustomEntity"}]},{"entityType":"Host","fieldMappings":[{"identifier":"FullName","columnName":"HostCustomEntity"}]},{"entityType":"IP","fieldMappings":[{"identifier":"Address","columnName":"IPCustomEntity"}]},{"entityType":"FileHash","fieldMappings":[{"identifier":"Algorithm","columnName":"AlgorithmCustomEntity"},{"identifier":"Value","columnName":"FileHashCustomEntity"}]},{"entityType":"Process","fieldMappings":[{"identifier":"ProcessId","columnName":"ProcessCustomEntity"}]}],
                "tactics": ["Collection"],
                "alertRuleTemplateName": "c37711a4-5f44-4472-8afc-0679bc0ef966", 
                "incidentConfiguration": {
                    "createIncident": true, 
                    "groupingConfiguration": {
                        "enabled": false, 
                    "reopenClosedIncident": false,
                    "lookbackDuration": "PT5H",
                        "matchingMethod": "AllEntities",
                        "groupByEntities": []
                     }
                },
                "eventGroupingSettings": {
                    "aggregationKind": "SingleAlert"
                   }
               }
           }
    ]
}