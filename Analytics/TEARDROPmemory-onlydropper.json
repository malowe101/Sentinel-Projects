{"$schema":"https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#","contentVersion":"1.0.0.0","parameters":{"analytic-id":{"defaultValue":"ceba0711-c74d-49a1-813e-c496e39f0683","metadata":{"description":"Unique id for the scheduled alert rule"},"minLength":1,"type":"string"},"workspace":{"type":"String"}},"resources":[[{"id":"/subscriptions/1c61ccbf-70b3-45a3-a1fb-848ce46d70a6/resourceGroups/cxe-malowe/providers/Microsoft.OperationalInsights/workspaces/malowe2/providers/Microsoft.SecurityInsights/alertRules/ceba0711-c74d-49a1-813e-c496e39f0683","name":"ceba0711-c74d-49a1-813e-c496e39f0683","etag":"\"800082f9-0000-0100-0000-622619250000\"","type":"Microsoft.SecurityInsights/alertRules","kind":"Scheduled","properties":{"incidentConfiguration":{"createIncident":true,"groupingConfiguration":{"enabled":false,"reopenClosedIncident":false,"lookbackDuration":"PT5H","matchingMethod":"AllEntities","groupByEntities":[],"groupByAlertDetails":null,"groupByCustomDetails":null}},"entityMappings":[{"entityType":"Account","fieldMappings":[{"identifier":"FullName","columnName":"AccountCustomEntity"}]},{"entityType":"Host","fieldMappings":[{"identifier":"FullName","columnName":"HostCustomEntity"}]},{"entityType":"FileHash","fieldMappings":[{"identifier":"Algorithm","columnName":"FileHashType"},{"identifier":"Value","columnName":"FileHashCustomEntity"}]}],"queryFrequency":"P1D","queryPeriod":"P1D","triggerOperator":"GreaterThan","triggerThreshold":0,"eventGroupingSettings":{"aggregationKind":"SingleAlert"},"severity":"High","query":"DeviceEvents| where ActionType has 'ExploitGuardNonMicrosoftSignedBlocked'| where InitiatingProcessFileName contains 'svchost.exe' and FileName contains 'NetSetupSvc.dll'| extend timestamp = TimeGenerated, AccountCustomEntity = iff(isnotempty(InitiatingProcessAccountUpn), InitiatingProcessAccountUpn, InitiatingProcessAccountName),HostCustomEntity = DeviceName, FileHashCustomEntity = InitiatingProcessSHA1, FileHashType = 'SHA1'","suppressionDuration":"PT5H","suppressionEnabled":false,"tactics":["Execution","Persistence","InitialAccess"],"displayName":"TEARDROP memory-only dropper","enabled":true,"description":"Identifies SolarWinds TEARDROP memory-only dropper IOCs in Window's defender Exploit Guard activityReferences:- https://www.fireeye.com/blog/threat-research/2020/12/evasive-attacker-leverages-solarwinds-supply-chain-compromises-with-sunburst-backdoor.html- https://gist.github.com/olafhartong/71ffdd4cab4b6acd5cbcd1a0691ff82f","alertRuleTemplateName":"738702fd-0a66-42c7-8586-e30f0583f8fe","lastModifiedUtc":"2022-03-07T14:39:31.3855527Z"}},{"id":"/subscriptions/1c61ccbf-70b3-45a3-a1fb-848ce46d70a6/resourceGroups/cxe-malowe/providers/Microsoft.OperationalInsights/workspaces/malowe2/providers/Microsoft.SecurityInsights/alertRules/9d921a62-f849-411e-98a1-8ea6718746bf","name":"9d921a62-f849-411e-98a1-8ea6718746bf","etag":"\"8000a5e6-0000-0100-0000-622618280000\"","type":"Microsoft.SecurityInsights/alertRules","kind":"Scheduled","properties":{"incidentConfiguration":{"createIncident":true,"groupingConfiguration":{"enabled":false,"reopenClosedIncident":false,"lookbackDuration":"PT5H","matchingMethod":"AllEntities","groupByEntities":[],"groupByAlertDetails":null,"groupByCustomDetails":null}},"entityMappings":[{"entityType":"Account","fieldMappings":[{"identifier":"FullName","columnName":"ServicePrincipal"}]},{"entityType":"Account","fieldMappings":[{"identifier":"FullName","columnName":"TargetObject"}]}],"queryFrequency":"PT2H","queryPeriod":"PT2H","triggerOperator":"GreaterThan","triggerThreshold":0,"eventGroupingSettings":{"aggregationKind":"SingleAlert"},"severity":"High","query":"AuditLogs| where LoggedByService =~ 'Core Directory'| where Category =~ 'ApplicationManagement'| where AADOperationType =~ 'Assign'| where ActivityDisplayName =~ 'Add app role assignment to service principal'| mv-expand TargetResources| mv-expand TargetResources.modifiedProperties| extend displayName_ = tostring(TargetResources_modifiedProperties.displayName)| where displayName_ =~ 'AppRole.Value'| extend AppRole = tostring(parse_json(tostring(TargetResources_modifiedProperties.newValue)))| where AppRole has 'RoleManagement.ReadWrite.Directory'| extend InitiatingApp = tostring(parse_json(tostring(InitiatedBy.app)).displayName)| extend Initiator = iif(isnotempty(InitiatingApp), InitiatingApp, tostring(parse_json(tostring(InitiatedBy.user)).userPrincipalName))| extend Target = tostring(parse_json(tostring(TargetResources.modifiedProperties[4].newValue)))| extend TargetId = tostring(parse_json(tostring(TargetResources.modifiedProperties[3].newValue)))| project TimeGenerated, OperationName, Initiator, Target, TargetId, Result| join kind=innerunique (  AuditLogs  | where LoggedByService =~ 'Core Directory'  | where Category =~ 'RoleManagement'  | where AADOperationType in ('Assign', 'AssignEligibleRole')  | where ActivityDisplayName has_any ('Add eligible member to role', 'Add member to role')  | mv-expand TargetResources  | mv-expand TargetResources.modifiedProperties  | extend displayName_ = tostring(TargetResources_modifiedProperties.displayName)  | where displayName_ =~ 'Role.DisplayName'  | extend RoleName = tostring(parse_json(tostring(TargetResources_modifiedProperties.newValue)))  | where RoleName contains 'Admin'  | extend Initiator = tostring(parse_json(tostring(InitiatedBy.app)).displayName)  | extend InitiatorId = tostring(parse_json(tostring(InitiatedBy.app)).servicePrincipalId)  | extend TargetUser = tostring(TargetResources.userPrincipalName)  | extend Target = iif(isnotempty(TargetUser), TargetUser, tostring(TargetResources.displayName))  | extend TargetType = tostring(TargetResources.type)  | extend TargetId = tostring(TargetResources.id)  | project TimeGenerated, OperationName,  RoleName, Initiator, InitiatorId, Target, TargetId, TargetType, Result) on $left.TargetId == $right.InitiatorId| extend TimeRoleMgGrant = TimeGenerated, TimeAdminPromo = TimeGenerated1, ServicePrincipal = Initiator1, ServicePrincipalId = InitiatorId,  TargetObject = Target1, TargetObjectId = TargetId1, TargetObjectType = TargetType| where TimeRoleMgGrant < TimeAdminPromo| project TimeRoleMgGrant, TimeAdminPromo, RoleName, ServicePrincipal, ServicePrincipalId, TargetObject, TargetObjectId, TargetObjectType","suppressionDuration":"PT5H","suppressionEnabled":false,"tactics":["PrivilegeEscalation","Persistence"],"displayName":"Admin promotion after Role Management Application Permission Grant","enabled":true,"description":"This rule looks for a service principal being granted the Microsoft Graph RoleManagement.ReadWrite.Directory (application) permission before being used to add an Azure AD object or user account to an Admin directory role (i.e. Global Administrators).This is a known attack path that is usually abused when a service principal already has the AppRoleAssignment.ReadWrite.All permission granted. This permission Allows an app to manage permission grants for application permissions to any API.A service principal can promote itself or other service principals to admin roles (i.e. Global Administrators). This would be considered a privilege escalation technique.Ref : https://docs.microsoft.com/graph/permissions-reference#role-management-permissions, https://docs.microsoft.com/graph/api/directoryrole-post-members?view=graph-rest-1.0&tabs=http","alertRuleTemplateName":"f80d951a-eddc-4171-b9d0-d616bb83efdc","lastModifiedUtc":"2022-03-07T14:35:19.9096177Z"}},{"id":"/subscriptions/1c61ccbf-70b3-45a3-a1fb-848ce46d70a6/resourceGroups/cxe-malowe/providers/Microsoft.OperationalInsights/workspaces/malowe2/providers/Microsoft.SecurityInsights/alertRules/fd161e3c-7562-4946-bd4b-cd6463880f1f","name":"fd161e3c-7562-4946-bd4b-cd6463880f1f","etag":"\"80003eef-0000-0100-0000-622618950000\"","type":"Microsoft.SecurityInsights/alertRules","kind":"Scheduled","properties":{"incidentConfiguration":{"createIncident":true,"groupingConfiguration":{"enabled":false,"reopenClosedIncident":false,"lookbackDuration":"PT5H","matchingMethod":"AllEntities","groupByEntities":[],"groupByAlertDetails":null,"groupByCustomDetails":null}},"entityMappings":[{"entityType":"Account","fieldMappings":[{"identifier":"FullName","columnName":"AccountCustomEntity"},{"identifier":"Sid","columnName":"CreatedUserSid"}]},{"entityType":"Host","fieldMappings":[{"identifier":"FullName","columnName":"HostCustomEntity"}]}],"queryFrequency":"P1D","queryPeriod":"P1D","triggerOperator":"GreaterThan","triggerThreshold":0,"eventGroupingSettings":{"aggregationKind":"SingleAlert"},"severity":"Low","query":"SecurityEvent\r| where EventID == 4720\r| where AccountType == 'User'\r| project CreatedUserTime = TimeGenerated, CreatedUserEventID = EventID, CreatedUserActivity = Activity, Computer = toupper(Computer), \rCreatedUser = tolower(TargetAccount), CreatedUserSid = TargetSid, AccountUsedToCreateUser = strcat(SubjectAccount), SidofAccountUsedToCreateUser = SubjectUserSid\r| join (\rSecurityEvent \r| where AccountType == 'User'\r// 4732 - A member was added to a security-enabled local group\r| where EventID == 4732\r//TargetSid is the builin Admins group: S-1-5-32-544\r| where TargetSid == 'S-1-5-32-544'\r| project GroupAddTime = TimeGenerated, GroupAddEventID = EventID, GroupAddActivity = Activity, Computer = toupper(Computer), GroupName = tolower(TargetAccount), \rGroupSid = TargetSid, AccountThatAddedUser = SubjectAccount, SIDofAccountThatAddedUser = SubjectUserSid, CreatedUserSid = MemberSid\r)\ron CreatedUserSid\r//Create User first, then the add to the group.\r| project Computer, CreatedUserTime, CreatedUserEventID, CreatedUserActivity, CreatedUser, CreatedUserSid, GroupAddTime, GroupAddEventID, \rGroupAddActivity, AccountUsedToCreateUser, GroupName, GroupSid, AccountThatAddedUser, SIDofAccountThatAddedUser \r| extend timestamp = CreatedUserTime, AccountCustomEntity = CreatedUser, HostCustomEntity = Computer","suppressionDuration":"PT5H","suppressionEnabled":false,"tactics":["Persistence","PrivilegeEscalation"],"displayName":"New user created and added to the built-in administrators group","enabled":true,"description":"Identifies when a user account was created and then added to the builtin Administrators group in the same day.This should be monitored closely and all additions reviewed.","alertRuleTemplateName":"aa1eff90-29d4-49dc-a3ea-b65199f516db","lastModifiedUtc":"2022-03-07T14:37:08.4181737Z"}},{"id":"/subscriptions/1c61ccbf-70b3-45a3-a1fb-848ce46d70a6/resourceGroups/cxe-malowe/providers/Microsoft.OperationalInsights/workspaces/malowe2/providers/Microsoft.SecurityInsights/alertRules/849121b8-735d-4ff0-a85f-4b9943f30385","name":"849121b8-735d-4ff0-a85f-4b9943f30385","etag":"\"80004de7-0000-0100-0000-622618310000\"","type":"Microsoft.SecurityInsights/alertRules","kind":"Scheduled","properties":{"incidentConfiguration":{"createIncident":true,"groupingConfiguration":{"enabled":false,"reopenClosedIncident":false,"lookbackDuration":"PT5H","matchingMethod":"AllEntities","groupByEntities":[],"groupByAlertDetails":null,"groupByCustomDetails":null}},"entityMappings":[{"entityType":"Account","fieldMappings":[{"identifier":"FullName","columnName":"Initiator"}]},{"entityType":"Account","fieldMappings":[{"identifier":"FullName","columnName":"Target"}]}],"queryFrequency":"PT2H","queryPeriod":"PT2H","triggerOperator":"GreaterThan","triggerThreshold":0,"eventGroupingSettings":{"aggregationKind":"SingleAlert"},"severity":"High","query":"AuditLogs| where LoggedByService =~ 'Core Directory'| where Category =~ 'ApplicationManagement'| where AADOperationType =~ 'Assign'| where ActivityDisplayName has_any ('Add delegated permission grant','Add app role assignment to service principal')| mv-expand TargetResources| mv-expand TargetResources.modifiedProperties| extend displayName_ = tostring(TargetResources_modifiedProperties.displayName)| where displayName_ has_any ('AppRole.Value','DelegatedPermissionGrant.Scope')| extend Permission = tostring(parse_json(tostring(TargetResources_modifiedProperties.newValue)))| where Permission has 'RoleManagement.ReadWrite.Directory'| extend InitiatingApp = tostring(parse_json(tostring(InitiatedBy.app)).displayName)| extend Initiator = iif(isnotempty(InitiatingApp), InitiatingApp, tostring(parse_json(tostring(InitiatedBy.user)).userPrincipalName))| extend Target = tostring(parse_json(tostring(TargetResources.modifiedProperties[4].newValue)))| extend TargetId = iif(displayName_ =~ 'DelegatedPermissionGrant.Scope',  tostring(parse_json(tostring(TargetResources.modifiedProperties[2].newValue))),  tostring(parse_json(tostring(TargetResources.modifiedProperties[3].newValue))))| summarize by bin(TimeGenerated, 1h), OperationName, Initiator, Target, TargetId, Result","suppressionDuration":"PT5H","suppressionEnabled":false,"tactics":["PrivilegeEscalation","Persistence"],"displayName":"Azure AD Role Management Permission Grant","enabled":true,"description":"Identifies when the Microsoft Graph RoleManagement.ReadWrite.Directory (Delegated or Application) permission is granted to a service principal.This permission allows an application to read and manage the role-based access control (RBAC) settings for your company's directory.An adversary could use this permission to add an Azure AD object to an Admin directory role and escalate privileges.Ref : https://docs.microsoft.com/graph/permissions-reference#role-management-permissionsRef : https://docs.microsoft.com/graph/api/directoryrole-post-members?view=graph-rest-1.0&tabs=http","alertRuleTemplateName":"1ff56009-db01-4615-8211-d4fda21da02d","lastModifiedUtc":"2022-03-07T14:35:28.9821323Z"}},{"id":"/subscriptions/1c61ccbf-70b3-45a3-a1fb-848ce46d70a6/resourceGroups/cxe-malowe/providers/Microsoft.OperationalInsights/workspaces/malowe2/providers/Microsoft.SecurityInsights/alertRules/f510c861-9ff1-4cff-8065-0680232742fb","name":"f510c861-9ff1-4cff-8065-0680232742fb","etag":"\"80006ee9-0000-0100-0000-622618500000\"","type":"Microsoft.SecurityInsights/alertRules","kind":"Scheduled","properties":{"incidentConfiguration":{"createIncident":true,"groupingConfiguration":{"enabled":false,"reopenClosedIncident":false,"lookbackDuration":"PT5H","matchingMethod":"AllEntities","groupByEntities":[],"groupByAlertDetails":null,"groupByCustomDetails":null}},"entityMappings":[{"entityType":"Account","fieldMappings":[{"identifier":"FullName","columnName":"AccountCustomEntity"}]},{"entityType":"Host","fieldMappings":[{"identifier":"FullName","columnName":"HostCustomEntity"}]},{"entityType":"IP","fieldMappings":[{"identifier":"Address","columnName":"IPCustomEntity"}]}],"queryFrequency":"P1D","queryPeriod":"P1D","triggerOperator":"GreaterThan","triggerThreshold":0,"eventGroupingSettings":{"aggregationKind":"SingleAlert"},"severity":"High","query":"let DomainNames = dynamic(['asyspy256.ddns.net','hotkillmail9sddcc.ddns.net','rosaf112.ddns.net','cvdfhjh1231.myftp.biz','sz2016rose.ddns.net','dffwescwer4325.myftp.biz','cvdfhjh1231.ddns.net']);\rlet SHA1Hash = dynamic (['53a44c2396d15c3a03723fa5e5db54cafd527635', '9c5e496921e3bc882dc40694f1dcc3746a75db19', 'aeb573accfd95758550cf30bf04f389a92922844', '79ef78a797403a4ed1a616c68e07fff868a8650a', '4f6f38b4cec35e895d91c052b1f5a83d665c2196', '1e8c2cac2e4ce7cbd33c3858eb2e24531cb8a84d', 'e841a63e47361a572db9a7334af459ddca11347a', 'c28f606df28a9bc8df75a4d5e5837fc5522dd34d', '2e94b305d6812a9f96e6781c888e48c7fb157b6b', 'dd44133716b8a241957b912fa6a02efde3ce3025', '8793bf166cb89eb55f0593404e4e933ab605e803', 'a39b57032dbb2335499a51e13470a7cd5d86b138', '41cc2b15c662bc001c0eb92f6cc222934f0beeea', 'd209430d6af54792371174e70e27dd11d3def7a7', '1c6452026c56efd2c94cea7e0f671eb55515edb0', 'c6b41d3afdcdcaf9f442bbe772f5da871801fd5a', '4923d460e22fbbf165bbbaba168e5a46b8157d9f', 'f201504bd96e81d0d350c3a8332593ee1c9e09de', 'ddd2db1127632a2a52943a2fe516a2e7d05d70d2']);\rlet SHA256Hash = dynamic (['9ae7c4a4e1cfe9b505c3a47e66551eb1357affee65bfefb0109d02f4e97c06dd', '7772d624e1aed327abcd24ce2068063da0e31bb1d5d3bf2841fc977e198c6c5b', '657fc7e6447e0065d488a7db2caab13071e44741875044f9024ca843fe4e86b5', '2ef157a97e28574356e1d871abf75deca7d7a1ea662f38b577a06dd039dbae29', '52fd7b90d7144ac448af4008be639d4d45c252e51823f4311011af3207a5fc77', 'a370e47cb97b35f1ae6590d14ada7561d22b4a73be0cb6df7e851d85054b1ac3', '5bf80b871278a29f356bd42af1e35428aead20cd90b0c7642247afcaaa95b022', '6f690ccfd54c2b02f0c3cb89c938162c10cbeee693286e809579c540b07ed883', '3c884f776fbd16597c072afd81029e8764dd57ee79d798829ca111f5e170bd8e', '1922a419f57afb351b58330ed456143cc8de8b3ebcbd236d26a219b03b3464d7', 'fe0e4ef832b62d49b43433e10c47dc51072959af93963c790892efc20ec422f1', '7ce9e1c5562c8a5c93878629a47fe6071a35d604ed57a8f918f3eadf82c11a9c', '178d5ee8c04401d332af331087a80fb4e5e2937edfba7266f9be34a5029b6945', '51f70956fa8c487784fd21ab795f6ba2199b5c2d346acdeef1de0318a4c729d9', '889bca95f1a69e94aaade1e959ed0d3620531dc0fc563be9a8decf41899b4d79', '332ddaa00e2eb862742cb8d7e24ce52a5d38ffb22f6c8bd51162bd35e84d7ddf', '44bcf82fa536318622798504e8369e9dcdb32686b95fcb44579f0b4efa79df08', '63552772fdd8c947712a2cff00dfe25c7a34133716784b6d486227384f8cf3ef', '056744a3c371b5938d63c396fe094afce8fb153796a65afa5103e1bffd7ca070']);\rlet SigNames = dynamic(['TrojanDropper:Win32/BlackMould.A!dha', 'Trojan:Win32/BlackMould.B!dha', 'Trojan:Win32/QuarkBandit.A!dha', 'Trojan:Win32/Sidelod.A!dha']);\r(union isfuzzy=true\r(CommonSecurityLog \r| parse Message with * '(' DNSName ')' * \r| where isnotempty(FileHash)\r| where FileHash in (SHA256Hash) or DNSName in~ (DomainNames)\r| extend Account = SourceUserID, Computer = DeviceName, IPAddress = SourceIP\r),\r(DnsEvents \r| extend DNSName = Name\r| where isnotempty(DNSName)\r| where DNSName has_any (DomainNames)\r| extend IPAddress = ClientIP\r),\r( imDns(domain_has_any=DomainNames)\r| extend DNSName = DnsQuery\r| extend IPAddress = SrcIpAddr\r),\r(VMConnection \r| parse RemoteDnsCanonicalNames with * '['' DNSName '']' *\r| where isnotempty(DNSName)\r| where DNSName  in~ (DomainNames)\r| extend IPAddress = RemoteIp\r),\r(Event\r//This query uses sysmon data depending on table name used this may need updataing\r| where Source == 'Microsoft-Windows-Sysmon'\r| extend EvData = parse_xml(EventData)\r| extend EventDetail = EvData.DataItem.EventData.Data\r| extend Hashes = EventDetail.[16].['#text']\r| parse Hashes with * 'SHA1=' SHA1 ',' * \r| where isnotempty(Hashes)\r| where Hashes in (SHA1Hash) \r| extend Account = UserName\r),\r(SecurityAlert\r| where ProductName == 'Microsoft Defender Advanced Threat Protection'\r| extend ThreatName = tostring(parse_json(ExtendedProperties).ThreatName)\r| where isnotempty(ThreatName)\r| where ThreatName has_any (SigNames)\r| extend Computer = tostring(parse_json(Entities)[0].HostName)\r),\r(AzureDiagnostics\r| where ResourceType == 'AZUREFIREWALLS'\r| where Category == 'AzureFirewallDnsProxy'\r| parse msg_s with 'DNS Request: ' ClientIP ':' ClientPort ' - ' QueryID ' ' Request_Type ' ' Request_Class ' ' Request_Name '. ' Request_Protocol ' ' Request_Size ' ' EDNSO_DO ' ' EDNS0_Buffersize ' ' Responce_Code ' ' Responce_Flags ' ' Responce_Size ' ' Response_Duration\r| where Request_Name has_any (DomainNames)  \r| extend DNSName = Request_Name\r| extend IPAddress = ClientIP \r),\r(AzureDiagnostics \r| where ResourceType == 'AZUREFIREWALLS'\r| where Category == 'AzureFirewallApplicationRule'\r| parse msg_s with Protocol 'request from ' SourceHost ':' SourcePort 'to ' DestinationHost ':' DestinationPort '. Action:' Action\r| where isnotempty(DestinationHost)\r| where DestinationHost has_any (DomainNames)  \r| extend DNSName = DestinationHost \r| extend IPAddress = SourceHost\r)\r)\r| extend timestamp = TimeGenerated, AccountCustomEntity = Account, HostCustomEntity = Computer, IPCustomEntity = IPAddress","suppressionDuration":"PT5H","suppressionEnabled":false,"tactics":["CommandAndControl","CredentialAccess"],"displayName":"Known GALLIUM domains and hashes","enabled":true,"description":"GALLIUM command and control domains and hash values for tools and malware used by GALLIUM.  Matches domain name IOCs related to the GALLIUM activity group with CommonSecurityLog, DnsEvents, VMConnection and SecurityEvents dataTypes. References: https://www.microsoft.com/security/blog/2019/12/12/gallium-targeting-global-telecom/ ","alertRuleTemplateName":"26a3b261-b997-4374-94ea-6c37f67f4f39","lastModifiedUtc":"2022-03-07T14:35:59.6343303Z"}},{"id":"/subscriptions/1c61ccbf-70b3-45a3-a1fb-848ce46d70a6/resourceGroups/cxe-malowe/providers/Microsoft.OperationalInsights/workspaces/malowe2/providers/Microsoft.SecurityInsights/alertRules/3785169c-62e2-488f-ac3b-5508945679cf","name":"3785169c-62e2-488f-ac3b-5508945679cf","etag":"\"8000bfe8-0000-0100-0000-622618470000\"","type":"Microsoft.SecurityInsights/alertRules","kind":"Scheduled","properties":{"incidentConfiguration":{"createIncident":true,"groupingConfiguration":{"enabled":false,"reopenClosedIncident":false,"lookbackDuration":"PT5H","matchingMethod":"AllEntities","groupByEntities":[],"groupByAlertDetails":null,"groupByCustomDetails":null}},"entityMappings":[{"entityType":"Account","fieldMappings":[{"identifier":"FullName","columnName":"AccountCustomEntity"}]},{"entityType":"Host","fieldMappings":[{"identifier":"FullName","columnName":"HostCustomEntity"}]},{"entityType":"IP","fieldMappings":[{"identifier":"Address","columnName":"IPCustomEntity"}]}],"queryFrequency":"P1D","queryPeriod":"P1D","triggerOperator":"GreaterThan","triggerThreshold":0,"eventGroupingSettings":{"aggregationKind":"SingleAlert"},"severity":"High","query":"let DomainNames = dynamic(['0.ns1.dns-info.gq', '1.ns1.dns-info.gq', '10.ns1.dns-info.gq', '102.ns1.dns-info.gq',    '104.ns1.dns-info.gq', '11.ns1.dns-info.gq', '110.ns1.dns-info.gq', '115.ns1.dns-info.gq', '116.ns1.dns-info.gq',    '117.ns1.dns-info.gq', '118.ns1.dns-info.gq', '12.ns1.dns-info.gq', '120.ns1.dns-info.gq', '122.ns1.dns-info.gq',    '123.ns1.dns-info.gq', '128.ns1.dns-info.gq', '13.ns1.dns-info.gq', '134.ns1.dns-info.gq', '135.ns1.dns-info.gq',    '138.ns1.dns-info.gq', '14.ns1.dns-info.gq', '144.ns1.dns-info.gq', '15.ns1.dns-info.gq', '153.ns1.dns-info.gq',    '157.ns1.dns-info.gq', '16.ns1.dns-info.gq', '17.ns1.dns-info.gq', '18.ns1.dns-info.gq', '19.ns1.dns-info.gq',    '1a9604fa.ns1.feedsdns.com', '1c7606b6.ns1.steamappstore.com', '2.ns1.dns-info.gq', '20.ns1.dns-info.gq',    '201.ns1.dns-info.gq', '202.ns1.dns-info.gq', '204.ns1.dns-info.gq', '207.ns1.dns-info.gq', '21.ns1.dns-info.gq',    '210.ns1.dns-info.gq', '211.ns1.dns-info.gq', '216.ns1.dns-info.gq', '22.ns1.dns-info.gq', '220.ns1.dns-info.gq',    '223.ns1.dns-info.gq', '23.ns1.dns-info.gq', '24.ns1.dns-info.gq', '25.ns1.dns-info.gq', '26.ns1.dns-info.gq',    '27.ns1.dns-info.gq', '28.ns1.dns-info.gq', '29.ns1.dns-info.gq', '3.ns1.dns-info.gq', '30.ns1.dns-info.gq',    '31.ns1.dns-info.gq', '32.ns1.dns-info.gq', '33.ns1.dns-info.gq', '34.ns1.dns-info.gq', '35.ns1.dns-info.gq',    '36.ns1.dns-info.gq', '37.ns1.dns-info.gq', '39.ns1.dns-info.gq', '3d6fe4b2.ns1.steamappstore.com',    '4.ns1.dns-info.gq', '40.ns1.dns-info.gq', '42.ns1.dns-info.gq', '43.ns1.dns-info.gq', '44.ns1.dns-info.gq',    '45.ns1.dns-info.gq', '46.ns1.dns-info.gq', '48.ns1.dns-info.gq', '5.ns1.dns-info.gq', '50.ns1.dns-info.gq',    '50417.service.gstatic.dnset.com', '51.ns1.dns-info.gq', '52.ns1.dns-info.gq', '53.ns1.dns-info.gq',   '54.ns1.dns-info.gq', '55.ns1.dns-info.gq', '56.ns1.dns-info.gq', '57.ns1.dns-info.gq', '58.ns1.dns-info.gq',    '6.ns1.dns-info.gq', '60.ns1.dns-info.gq', '62.ns1.dns-info.gq', '63.ns1.dns-info.gq', '64.ns1.dns-info.gq',    '65.ns1.dns-info.gq', '67.ns1.dns-info.gq', '7.ns1.dns-info.gq', '70.ns1.dns-info.gq', '71.ns1.dns-info.gq',   '73.ns1.dns-info.gq', '77.ns1.dns-info.gq', '77075.service.gstatic.dnset.com', '7c1947fa.ns1.steamappstore.com',   '8.ns1.dns-info.gq', '81.ns1.dns-info.gq', '86.ns1.dns-info.gq', '87.ns1.dns-info.gq', '9.ns1.dns-info.gq',    '94343.service.gstatic.dnset.com', '9939.service.gstatic.dnset.com', 'aa.ns.mircosoftdoc.com',    'aaa.feeds.api.ns1.feedsdns.com', 'aaa.googlepublic.feeds.ns1.dns-info.gq',    'aaa.resolution.174547._get.cache.up.sourcedns.tk', 'acc.microsoftonetravel.com',    'accounts.longmusic.com', 'admin.dnstemplog.com', 'agent.updatenai.com',    'alibaba.zzux.com', 'api.feedsdns.com', 'app.portomnail.com', 'asia.updatenai.com',    'battllestategames.com', 'bguha.serveuser.com', 'binann-ce.com', 'bing.dsmtp.com',    'blog.cdsend.xyz', 'brives.minivineyapp.com', 'bsbana.dynamic-dns.net',    'californiaforce.000webhostapp.com', 'californiafroce.000webhostapp.com',    'cdn.freetcp.com', 'cdsend.xyz', 'cipla.zzux.com', 'cloudfeeddns.com', 'comcleanner.info',   'cs.microsoftsonline.net', 'dns-info.gq', 'dns05.cf', 'dns22.ml', 'dns224.com',    'dnsdist.org', 'dnstemplog.com', 'doc.mircosoftdoc.com', 'dropdns.com',    'eshop.cdn.freetcp.com', 'exchange.dumb1.com', 'exchange.misecure.com', 'exchange.mrbasic.com',   'facebookdocs.com', 'facebookint.com', 'facebookvi.com', 'feed.ns1.dns-info.gq', 'feedsdns.com',    'firejun.freeddns.com', 'ftp.dns-info.dyndns.pro', 'goallbandungtravel.com', 'goodhk.azurewebsites.net',    'googlepublic.feed.ns1.dns-info.gq', 'gp.spotifylite.cloud', 'gskytop.com', 'gstatic.dnset.com',    'gxxservice.com', 'helpdesk.cdn.freetcp.com', 'id.serveuser.com', 'infestexe.com', 'item.itemdb.com',   'm.mircosoftdoc.com', 'mail.transferdkim.xyz', 'mcafee.updatenai.com', 'mecgjm.mircosoftdoc.com',   'microdocs.ga', 'microsock.website', 'microsocks.net', 'microsoft.sendsmtp.com',    'microsoftbook.dns05.com', 'microsoftcontactcenter.com', 'microsoftdocs.dns05.com', 'microsoftdocs.ml',    'microsoftonetravel.com', 'microsoftonlines.net', 'microsoftprod.com', 'microsofts.dns1.us', 'microsoftsonline.net',    'minivineyapp.com', 'mircosoftdoc.com', 'mircosoftdocs.com', 'mlcrosoft.ninth.biz', 'mlcrosoft.site',    'mm.portomnail.com', 'msdnupdate.com', 'msecdn.cloud', 'mtnl1.dynamic-dns.net', 'ns.gstatic.dnset.com',    'ns.microsoftprod.com', 'ns.steamappstore.com', 'ns1.cdn.freetcp.com', 'ns1.comcleanner.info', 'ns1.dns-info.gq',    'ns1.dns05.cf', 'ns1.dnstemplog.com', 'ns1.dropdns.com', 'ns1.microsoftonetravel.com',    'ns1.microsoftonlines.net', 'ns1.microsoftprod.com', 'ns1.microsoftsonline.net', 'ns1.mlcrosoft.site',    'ns1.teams.wikaba.com', 'ns1.windowsdefende.com', 'ns2.comcleanner.info', 'ns2.dnstemplog.com',    'ns2.microsoftonetravel.com', 'ns2.microsoftprod.com', 'ns2.microsoftsonline.net', 'ns2.mlcrosoft.site',    'ns2.windowsdefende.com', 'ns3.microsoftprod.com', 'ns3.mlcrosoft.site', 'nutrition.mrbasic.com',    'nutrition.youdontcare.com', 'online.mlcrosoft.site', 'online.msdnupdate.com', 'outlookservce.site',    'owa.jetos.com', 'owa.otzo.com', 'pornotime.co', 'portomnail.com',    'post.1a0.066e063ac.7c1947fa.ns1.steamappstore.com', 'pricingdmdk.com', 'prod.microsoftprod.com',    'product.microsoftprod.com', 'ptcl.yourtrap.com', 'query.api.sourcedns.tk', 'rb.itemdb.com', 'redditcdn.com',    'rss.otzo.com', 'secure.msdnupdate.com', 'service.dns22.ml', 'service.gstatic.dnset.com', 'service04.dns04.com',    'settings.teams.wikaba.com', 'sip.outlookservce.site', 'sixindent.epizy.com', 'soft.msdnupdate.com', 'sourcedns.ml',    'sourcedns.tk', 'sport.msdnupdate.com', 'spotifylite.cloud', 'static.misecure.com', 'steamappstore.com',    'store.otzo.com', 'survey.outlookservce.site', 'team.itemdb.com', 'temp221.com', 'test.microsoftprod.com',    'thisisaaa.000webhostapp.com', 'token.dns04.com', 'token.dns05.com', 'transferdkim.xyz',    'travelsanignacio.com', 'update08.com', 'updated08.com', 'updatenai.com', 'wantforspeed.com',    'web.mircosoftdoc.com', 'webmail.pornotime.co', 'webwhois.team.itemdb.com', 'windowsdefende.com', 'wnswindows.com',    'ashcrack.freetcp.com', 'battllestategames.com', 'binannce.com', 'cdsend.xyz', 'comcleanner.info', 'microsock.website',    'microsocks.net', 'microsoftsonline.net', 'mlcrosoft.site', 'notify.serveuser.com', 'ns1.microsoftprod.com',    'ns2.microsoftprod.com', 'pricingdmdk.com', 'steamappstore.com', 'update08.com', 'wnswindows.com',    'youtube.dns05.com', 'z1.zalofilescdn.com', 'z2.zalofilescdn.com', 'zalofilescdn.com']); (union isfuzzy=true  (CommonSecurityLog   | parse Message with * '(' DNSName ')' *   | where DNSName in~ (DomainNames)  | extend Account = SourceUserID, Computer = DeviceName, IPAddress =  DestinationIP  ),  (DnsEvents   | extend DNSName = Name  | where isnotempty(DNSName)  | where DNSName  has_any (DomainNames)  | extend IPAddress =  ClientIP  ),  (imDns (domain_has_any=DomainNames) | extend DNSName = DnsQuery  | extend IPAddress =  SrcIpAddr, Computer = Dvc ),  (VMConnection   | parse RemoteDnsCanonicalNames with * '['' DNSName '']' *  | where isnotempty(DNSName)  | where DNSName  in~ (DomainNames)  | extend IPAddress = RemoteIp  ),  (   DeviceNetworkEvents  | where isnotempty(RemoteUrl)  | where RemoteUrl  in~ (DomainNames)   | extend IPAddress = RemoteIP  | extend Computer = DeviceName  ), (AzureDiagnostics | where ResourceType == 'AZUREFIREWALLS' | where Category == 'AzureFirewallDnsProxy' | parse msg_s with 'DNS Request: ' ClientIP ':' ClientPort ' - ' QueryID ' ' Request_Type ' ' Request_Class ' ' Request_Name '. ' Request_Protocol ' ' Request_Size ' ' EDNSO_DO ' ' EDNS0_Buffersize ' ' Responce_Code ' ' Responce_Flags ' ' Responce_Size ' ' Response_Duration | where Request_Name has_any (DomainNames)   | extend DNSName = Request_Name | extend IPAddress = ClientIP  ), (AzureDiagnostics  | where ResourceType == 'AZUREFIREWALLS' | where Category == 'AzureFirewallApplicationRule' | parse msg_s with Protocol 'request from ' SourceHost ':' SourcePort 'to ' DestinationHost ':' DestinationPort '. Action:' Action | where isnotempty(DestinationHost) | where DestinationHost has_any (DomainNames)   | extend DNSName = DestinationHost  | extend IPAddress = SourceHost )  )  | extend timestamp = TimeGenerated, AccountCustomEntity = Account, HostCustomEntity = Computer, IPCustomEntity = IPAddress","suppressionDuration":"PT5H","suppressionEnabled":false,"tactics":["CommandAndControl"],"displayName":"Known Barium domains","enabled":true,"description":"Identifies a match across various data feeds for domains IOCs related to the Barium activity group. References: https://www.justice.gov/opa/pr/seven-international-cyber-defendants-including-apt41-actors-charged-connection-computer","alertRuleTemplateName":"70b12a3b-4899-42cb-910c-5ffaf9d7997d","lastModifiedUtc":"2022-03-07T14:35:50.7468427Z"}},{"id":"/subscriptions/1c61ccbf-70b3-45a3-a1fb-848ce46d70a6/resourceGroups/cxe-malowe/providers/Microsoft.OperationalInsights/workspaces/malowe2/providers/Microsoft.SecurityInsights/alertRules/d0f6eedd-b507-40ae-899f-ea59bace264e","name":"d0f6eedd-b507-40ae-899f-ea59bace264e","etag":"\"800055f6-0000-0100-0000-622618f70000\"","type":"Microsoft.SecurityInsights/alertRules","kind":"Scheduled","properties":{"incidentConfiguration":{"createIncident":true,"groupingConfiguration":{"enabled":false,"reopenClosedIncident":false,"lookbackDuration":"PT5H","matchingMethod":"AllEntities","groupByEntities":[],"groupByAlertDetails":null,"groupByCustomDetails":null}},"entityMappings":[{"entityType":"Account","fieldMappings":[{"identifier":"FullName","columnName":"AccountCustomEntity"}]},{"entityType":"Host","fieldMappings":[{"identifier":"FullName","columnName":"HostCustomEntity"}]},{"entityType":"FileHash","fieldMappings":[{"identifier":"Algorithm","columnName":"AlgorithmCustomEntity"},{"identifier":"Value","columnName":"FileHashCustomEntity"}]}],"queryFrequency":"P1D","queryPeriod":"P1D","triggerOperator":"GreaterThan","triggerThreshold":0,"eventGroupingSettings":{"aggregationKind":"SingleAlert"},"severity":"High","query":"let SunburstMD5=dynamic(['b91ce2fa41029f6955bff20079468448','02af7cec58b9a5da1c542b5a32151ba1','2c4a910a1299cdae2a4e55988a2f102e','846e27a652a5e1bfbd0ddd38a16dc865','4f2eb62fa529c0283b28d05ddd311fae']);let SupernovaMD5='56ceb6d0011d87b6e4d7023d7ef85676';DeviceFileEvents| where MD5 in(SunburstMD5) or MD5 in(SupernovaMD5)| extend    timestamp = TimeGenerated,    AccountCustomEntity = iff(isnotempty(InitiatingProcessAccountUpn), InitiatingProcessAccountUpn, InitiatingProcessAccountName),    HostCustomEntity = DeviceName,    AlgorithmCustomEntity = 'MD5',    FileHashCustomEntity = MD5","suppressionDuration":"PT5H","suppressionEnabled":false,"tactics":["Execution","Persistence","InitialAccess"],"displayName":"SUNBURST and SUPERNOVA backdoor hashes","enabled":true,"description":"Identifies SolarWinds SUNBURST and SUPERNOVA backdoor file hash IOCs in DeviceFileEventsReferences:- https://www.fireeye.com/blog/threat-research/2020/12/evasive-attacker-leverages-solarwinds-supply-chain-compromises-with-sunburst-backdoor.html- https://gist.github.com/olafhartong/71ffdd4cab4b6acd5cbcd1a0691ff82f","alertRuleTemplateName":"a3c144f9-8051-47d4-ac29-ffb0c312c910","lastModifiedUtc":"2022-03-07T14:38:46.695277Z"}},{"id":"/subscriptions/1c61ccbf-70b3-45a3-a1fb-848ce46d70a6/resourceGroups/cxe-malowe/providers/Microsoft.OperationalInsights/workspaces/malowe2/providers/Microsoft.SecurityInsights/alertRules/ba67d4e8-16eb-404a-8d1a-3e036a1be1a2","name":"ba67d4e8-16eb-404a-8d1a-3e036a1be1a2","etag":"\"0300a3c6-0000-0100-0000-622c016e0000\"","type":"Microsoft.SecurityInsights/alertRules","kind":"Scheduled","properties":{"incidentConfiguration":{"createIncident":true,"groupingConfiguration":{"enabled":false,"reopenClosedIncident":false,"lookbackDuration":"PT5H","matchingMethod":"AllEntities","groupByEntities":[],"groupByAlertDetails":[],"groupByCustomDetails":[]}},"queryFrequency":"PT5H","queryPeriod":"PT5H","triggerOperator":"GreaterThan","triggerThreshold":0,"eventGroupingSettings":{"aggregationKind":"SingleAlert"},"severity":"Medium","query":"AzureActivity\r\n//This is a sample comment\r\n| where TimeGenerated >= ago(90d)\r\n| where ActivityStatus has 'succeeded'\r\n| where OperationName has 'tables/write'\r\n| extend modifiedTable = extract('tables/(.*)', 1, _ResourceId)\r\n| summarize arg_max(TimeGenerated, *) by modifiedTable\r\n| project ['Last Modified Time'] = TimeGenerated, modifiedTable","suppressionDuration":"PT5H","suppressionEnabled":false,"tactics":[],"displayName":"Table Retention Modified","enabled":true,"description":"","alertRuleTemplateName":null,"lastModifiedUtc":"2022-03-12T02:11:57.7894999Z"}},{"id":"/subscriptions/1c61ccbf-70b3-45a3-a1fb-848ce46d70a6/resourceGroups/cxe-malowe/providers/Microsoft.OperationalInsights/workspaces/malowe2/providers/Microsoft.SecurityInsights/alertRules/696205fd-2bf4-4b3d-8a5b-90e56863d573","name":"696205fd-2bf4-4b3d-8a5b-90e56863d573","etag":"\"8000f7e7-0000-0100-0000-6226183a0000\"","type":"Microsoft.SecurityInsights/alertRules","kind":"Scheduled","properties":{"incidentConfiguration":{"createIncident":true,"groupingConfiguration":{"enabled":true,"reopenClosedIncident":false,"lookbackDuration":"PT5H","matchingMethod":"AllEntities","groupByEntities":null,"groupByAlertDetails":null,"groupByCustomDetails":null}},"queryFrequency":"PT4H","queryPeriod":"PT4H","triggerOperator":"GreaterThan","triggerThreshold":0,"severity":"High","query":"AuditLogs| where Category =~ 'RoleManagement'| where ActivityDisplayName has_any ('Add eligible member to role', 'Add member to role')| mv-expand TargetResources| mv-expand TargetResources.modifiedProperties| extend displayName_ = tostring(TargetResources_modifiedProperties.displayName)| where displayName_ =~ 'Role.DisplayName'| extend RoleName = tostring(parse_json(tostring(TargetResources_modifiedProperties.newValue)))| where RoleName contains 'Admin'| extend Target = tostring(TargetResources.userPrincipalName)| summarize dcount(Target) by bin(TimeGenerated, 1h)| where dcount_Target > 9| join kind=rightsemi  (AuditLogs| where Category =~ 'RoleManagement'| where ActivityDisplayName has_any ('Add eligible member to role', 'Add member to role')| mv-expand TargetResources| mv-expand TargetResources.modifiedProperties| extend displayName_ = tostring(TargetResources_modifiedProperties.displayName)| where displayName_ =~ 'Role.DisplayName'| extend RoleName = tostring(parse_json(tostring(TargetResources_modifiedProperties.newValue)))| where RoleName contains 'Admin'| extend Target = tostring(TargetResources.userPrincipalName)| extend TimeWindow = bin(TimeGenerated, 1h)) on $left.TimeGenerated == $right.TimeWindow| extend AccountCustomEntity = Target","suppressionDuration":"PT5H","suppressionEnabled":false,"tactics":["PrivilegeEscalation"],"displayName":"Bulk Changes to Privileged Account Permissions","enabled":true,"description":"Identifies when changes to multiple users permissions are changed at once. Investigate immediately if not a planned change. This setting could enable an attacker access to Azure subscriptions in your environment.Ref : https://docs.microsoft.com/azure/active-directory/fundamentals/security-operations-privileged-identity-management","alertRuleTemplateName":"218f60de-c269-457a-b882-9966632b9dc6","lastModifiedUtc":"2022-03-07T14:35:37.6934164Z"}},{"id":"/subscriptions/1c61ccbf-70b3-45a3-a1fb-848ce46d70a6/resourceGroups/cxe-malowe/providers/Microsoft.OperationalInsights/workspaces/malowe2/providers/Microsoft.SecurityInsights/alertRules/95df51cb-836d-4e1a-9f2a-d66a20eacff9","name":"95df51cb-836d-4e1a-9f2a-d66a20eacff9","etag":"\"0d00e7c3-0000-0100-0000-6229fbe60000\"","type":"Microsoft.SecurityInsights/alertRules","kind":"Scheduled","properties":{"incidentConfiguration":{"createIncident":true,"groupingConfiguration":{"enabled":false,"reopenClosedIncident":false,"lookbackDuration":"PT5H","matchingMethod":"AllEntities","groupByEntities":[],"groupByAlertDetails":[],"groupByCustomDetails":[]}},"entityMappings":[{"entityType":"Account","fieldMappings":[{"identifier":"FullName","columnName":"AccountCustomEntity"}]},{"entityType":"Host","fieldMappings":[{"identifier":"FullName","columnName":"HostCustomEntity"}]},{"entityType":"IP","fieldMappings":[{"identifier":"Address","columnName":"IPCustomEntity"}]},{"entityType":"URL","fieldMappings":[{"identifier":"Url","columnName":"URLCustomEntity"}]}],"templateVersion":"1.0.0","queryFrequency":"P1D","queryPeriod":"P1D","triggerOperator":"GreaterThan","triggerThreshold":0,"eventGroupingSettings":{"aggregationKind":"SingleAlert"},"severity":"Medium","query":"let endpointData = \n(SecurityEvent\n  | where EventID == 4688\n  | extend shortFileName = tostring(split(NewProcessName, '\\\\')[-1])\n  );\n// Correlate suspect executables seen in TrendMicro rule updates with similar activity on endpoints\nCommonSecurityLog\n| where DeviceVendor =~ \"Trend Micro\"\n| where Activity =~ \"Deny List updated\" \n| where RequestURL endswith \".exe\"\n| project TimeGenerated, Activity , RequestURL , SourceIP, DestinationIP\n| extend suspectExeName = tolower(tostring(split(RequestURL, '/')[-1]))\n| join (endpointData) on $left.suspectExeName == $right.shortFileName \n| extend timestamp = TimeGenerated, IPCustomEntity = DestinationIP, AccountCustomEntity = TargetUserName, HostCustomEntity = Computer, URLCustomEntity = RequestURL","suppressionDuration":"PT5H","suppressionEnabled":false,"tactics":["Execution"],"displayName":"Network endpoint to host executable correlation","enabled":true,"description":"Correlates blocked URLs hosting [malicious] executables with host endpoint data\nto identify potential instances of executables of the same name having been recently run.","alertRuleTemplateName":"01f64465-b1ef-41ea-a7f5-31553a11ad43","lastModifiedUtc":"2022-03-06T02:10:49.1301885Z"}},{"id":"/subscriptions/1c61ccbf-70b3-45a3-a1fb-848ce46d70a6/resourceGroups/cxe-malowe/providers/Microsoft.OperationalInsights/workspaces/malowe2/providers/Microsoft.SecurityInsights/alertRules/4be07ce6-23aa-482f-851c-88f0b339a4ce","name":"4be07ce6-23aa-482f-851c-88f0b339a4ce","etag":"\"07009d3e-0000-0100-0000-622df4020000\"","type":"Microsoft.SecurityInsights/alertRules","kind":"Scheduled","properties":{"incidentConfiguration":{"createIncident":true,"groupingConfiguration":{"enabled":false,"reopenClosedIncident":false,"lookbackDuration":"PT5H","matchingMethod":"AllEntities","groupByEntities":[],"groupByAlertDetails":[],"groupByCustomDetails":[]}},"entityMappings":[{"entityType":"Account","fieldMappings":[{"identifier":"FullName","columnName":"AccountCustomEntity"}]},{"entityType":"IP","fieldMappings":[{"identifier":"Address","columnName":"IPCustomEntity"}]}],"templateVersion":"1.0.0","queryFrequency":"P1D","queryPeriod":"P1D","triggerOperator":"GreaterThan","triggerThreshold":0,"eventGroupingSettings":{"aggregationKind":"SingleAlert"},"severity":"Medium","query":"//Adjust this threshold to fit your environment\nlet signin_threshold = 5; \n//Make a list of IPs with AAD signin failures above our threshold\nlet aadFunc = (tableName:string){\nlet Suspicious_signins = \ntable(tableName)\n| where ResultType !in (\"0\", \"50125\", \"50140\")\n| where IPAddress !in (\"127.0.0.1\", \"::1\")\n| summarize count() by IPAddress\n| where count_ >  signin_threshold\n| summarize make_set(IPAddress);\nSuspicious_signins\n};\nlet aadSignin = aadFunc(\"SigninLogs\");\nlet aadNonInt = aadFunc(\"AADNonInteractiveUserSignInLogs\");\nlet Suspicious_signins = \nunion isfuzzy=true aadSignin, aadNonInt\n| summarize make_set(set_IPAddress);\n//See if any of those IPs have sucessfully logged into the AWS console\nAWSCloudTrail\n| where EventName =~ \"ConsoleLogin\"\n| extend LoginResult = tostring(parse_json(ResponseElements).ConsoleLogin) \n| where LoginResult =~ \"Success\"\n| where SourceIpAddress in (Suspicious_signins)\n| extend Reason = \"Multiple failed AAD logins from IP address\"\n| extend MFAUsed = tostring(parse_json(AdditionalEventData).MFAUsed)\n| extend User = iif(isempty(UserIdentityUserName), UserIdentityType, UserIdentityUserName) \n| summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated) by Reason, LoginResult, EventTypeName, UserIdentityType, User, AWSRegion, SourceIpAddress, UserAgent, MFAUsed\n| extend timestamp = StartTimeUtc, AccountCustomEntity = User, IPCustomEntity = SourceIpAddress","suppressionDuration":"PT5H","suppressionEnabled":false,"tactics":["InitialAccess","CredentialAccess"],"displayName":"Failed AzureAD logons but success logon to AWS Console","enabled":true,"description":"Identifies a list of IP addresses with a minimum number(defualt of 5) of failed logon attempts to Azure Active Directory.\nUses that list to identify any successful AWS Console logons from these IPs within the same timeframe.","alertRuleTemplateName":"643c2025-9604-47c5-833f-7b4b9378a1f5","lastModifiedUtc":"2022-03-12T02:28:46.8942219Z"}},{"id":"/subscriptions/1c61ccbf-70b3-45a3-a1fb-848ce46d70a6/resourceGroups/cxe-malowe/providers/Microsoft.OperationalInsights/workspaces/malowe2/providers/Microsoft.SecurityInsights/alertRules/928ebd34-99c9-43f9-bc8e-a0bbd1368fa4","name":"928ebd34-99c9-43f9-bc8e-a0bbd1368fa4","etag":"\"0900bb8f-0000-0100-0000-622f7a390000\"","type":"Microsoft.SecurityInsights/alertRules","kind":"Scheduled","properties":{"incidentConfiguration":{"createIncident":true,"groupingConfiguration":{"enabled":false,"reopenClosedIncident":false,"lookbackDuration":"PT5H","matchingMethod":"AllEntities","groupByEntities":[],"groupByAlertDetails":[],"groupByCustomDetails":[]}},"entityMappings":[{"entityType":"Account","fieldMappings":[{"identifier":"FullName","columnName":"AccountCustomEntity"}]},{"entityType":"Host","fieldMappings":[{"identifier":"FullName","columnName":"HostCustomEntity"}]},{"entityType":"IP","fieldMappings":[{"identifier":"Address","columnName":"IPCustomEntity"}]},{"entityType":"AzureResource","fieldMappings":[{"identifier":"ResourceId","columnName":"ResourceCustomEntity"}]}],"templateVersion":"1.0.0","queryFrequency":"PT12H","queryPeriod":"PT12H","triggerOperator":"GreaterThan","triggerThreshold":0,"eventGroupingSettings":{"aggregationKind":"SingleAlert"},"severity":"High","query":"let successCodes = dynamic([200, 302, 401]);\nW3CIISLog\n| where scStatus has_any (successCodes)\n| where ipv4_is_private(cIP) == False\n| where csUriStem hasprefix \"/autodiscover/autodiscover.json\"\n| project TimeGenerated, cIP, sIP, sSiteName, csUriStem, csUriQuery, Computer, csUserName, _ResourceId, FileUri\n| where (csUriQuery !has \"Protocol\" and isnotempty(csUriQuery))\nor (csUriQuery has_any(\"/mapi/\", \"powershell\"))\nor (csUriQuery contains \"@\" and csUriQuery matches regex @\"\\.[a-zA-Z]{2,4}?(?:[a-zA-Z]{2,4}\\/)\")\nor (csUriQuery contains \":\" and csUriQuery matches regex @\"\\:[0-9]{2,4}\\/\")\n| extend timestamp = TimeGenerated, HostCustomEntity = Computer, IPCustomEntity = cIP, AccountCustomEntity = csUserName, ResourceCustomEntity = _ResourceId, FileCustomEntity = FileUri","suppressionDuration":"PT5H","suppressionEnabled":false,"tactics":["InitialAccess"],"displayName":"Exchange SSRF Autodiscover ProxyShell - Detection","enabled":true,"description":"This query looks for suspicious request patterns to Exchange servers that fit patterns recently\nblogged about by PeterJson. This exploitation chain utilises an SSRF vulnerability in Exchange\nwhich eventually allows the attacker to execute arbitrary Powershell on the server. In the example\npowershell can be used to write an email to disk with an encoded attachment containing a shell.\nReference: https://peterjson.medium.com/reproducing-the-proxyshell-pwn2own-exploit-49743a4ea9a1","alertRuleTemplateName":"968358d6-6af8-49bb-aaa4-187b3067fb95","lastModifiedUtc":"2022-03-14T17:24:08.5148495Z"}},{"id":"/subscriptions/1c61ccbf-70b3-45a3-a1fb-848ce46d70a6/resourceGroups/cxe-malowe/providers/Microsoft.OperationalInsights/workspaces/malowe2/providers/Microsoft.SecurityInsights/alertRules/226d4071-5387-481d-b4eb-ced53722d84f","name":"226d4071-5387-481d-b4eb-ced53722d84f","etag":"\"09003590-0000-0100-0000-622f7a920000\"","type":"Microsoft.SecurityInsights/alertRules","kind":"Scheduled","properties":{"incidentConfiguration":{"createIncident":true,"groupingConfiguration":{"enabled":false,"reopenClosedIncident":false,"lookbackDuration":"PT5H","matchingMethod":"AllEntities","groupByEntities":[],"groupByAlertDetails":[],"groupByCustomDetails":[]}},"entityMappings":[{"entityType":"Account","fieldMappings":[{"identifier":"FullName","columnName":"AccountCustomEntity"}]},{"entityType":"Host","fieldMappings":[{"identifier":"FullName","columnName":"HostCustomEntity"}]}],"templateVersion":"1.2.0","queryFrequency":"P1D","queryPeriod":"P1D","triggerOperator":"GreaterThan","triggerThreshold":0,"eventGroupingSettings":{"aggregationKind":"SingleAlert"},"severity":"High","query":"(union isfuzzy=true\n(Event\n| where Source == \"Microsoft-Windows-Sysmon\"\n| where EventID in (17,18)\n| where EventData has '583da945-62af-10e8-4902-a8f205c72b2e'\n| extend EventData = parse_xml(EventData).DataItem.EventData.Data\n| mv-expand bagexpansion=array EventData\n| evaluate bag_unpack(EventData)\n| extend Key = tostring(column_ifexists('@Name', \"\")), Value = column_ifexists('#text', \"\")\n| evaluate pivot(Key, any(Value), TimeGenerated, Source, EventLog, Computer, EventLevel, EventLevelName, EventID, UserName, MG, ManagementGroupName, _ResourceId)\n| extend PipeName = column_ifexists(\"PipeName\", \"\")\n| extend Account = UserName\n),\n(\nSecurityEvent\n| where EventID == '5145'\n// %%4418 looks for presence of CreatePipeInstance value \n| where AccessList has '%%4418'     \n| where RelativeTargetName has '583da945-62af-10e8-4902-a8f205c72b2e'\n),\n(\nWindowsEvent\n| where EventID == '5145' and EventData has '%%4418'  and EventData has '583da945-62af-10e8-4902-a8f205c72b2e' \n// %%4418 looks for presence of CreatePipeInstance value \n| extend AccessList= tostring(EventData.AccessList)\n| where AccessList has '%%4418'     \n| extend RelativeTargetName= tostring(EventData.RelativeTargetName)\n| where RelativeTargetName has '583da945-62af-10e8-4902-a8f205c72b2e'\n| extend Account =  strcat(tostring(EventData.SubjectDomainName),\"\\\\\", tostring(EventData.SubjectUserName))\n)\n)\n| extend timestamp = TimeGenerated, AccountCustomEntity = Account, HostCustomEntity = Computer","suppressionDuration":"PT5H","suppressionEnabled":false,"tactics":["DefenseEvasion","PrivilegeEscalation"],"displayName":"Solorigate Named Pipe","enabled":true,"description":"Identifies a match across various data feeds for named pipe IOCs related to the Solorigate incident.\n For the sysmon events required for this detection, logging for Named Pipe Events needs to be configured in Sysmon config (Event ID 17 and Event ID 18)\n Reference: https://techcommunity.microsoft.com/t5/azure-sentinel/solarwinds-post-compromise-hunting-with-azure-sentinel/ba-p/1995095","alertRuleTemplateName":"11b4c19d-2a79-4da3-af38-b067e1273dee","lastModifiedUtc":"2022-03-14T17:25:38.2546026Z"}},{"id":"/subscriptions/1c61ccbf-70b3-45a3-a1fb-848ce46d70a6/resourceGroups/cxe-malowe/providers/Microsoft.OperationalInsights/workspaces/malowe2/providers/Microsoft.SecurityInsights/alertRules/60488305-ad12-451c-8d6e-df2a663f0119","name":"60488305-ad12-451c-8d6e-df2a663f0119","etag":"\"09006390-0000-0100-0000-622f7aa10000\"","type":"Microsoft.SecurityInsights/alertRules","kind":"Scheduled","properties":{"incidentConfiguration":{"createIncident":true,"groupingConfiguration":{"enabled":false,"reopenClosedIncident":false,"lookbackDuration":"PT5H","matchingMethod":"AllEntities","groupByEntities":[],"groupByAlertDetails":[],"groupByCustomDetails":[]}},"entityMappings":[{"entityType":"Account","fieldMappings":[{"identifier":"FullName","columnName":"AccountCustomEntity"}]},{"entityType":"IP","fieldMappings":[{"identifier":"Address","columnName":"IPCustomEntity"}]}],"templateVersion":"1.0.0","queryFrequency":"P1D","queryPeriod":"P1D","triggerOperator":"GreaterThan","triggerThreshold":0,"eventGroupingSettings":{"aggregationKind":"SingleAlert"},"severity":"High","query":"(union isfuzzy=true\n(\nAuditLogs\n| where OperationName =~ \"Set federation settings on domain\"\n//| where Result =~ \"success\"   // commenting out, as it may be interesting to capture failed attempts\n| mv-expand TargetResources\n| extend modifiedProperties = parse_json(TargetResources).modifiedProperties\n| mv-expand modifiedProperties\n| extend targetDisplayName = tostring(parse_json(modifiedProperties).displayName)\n| mv-expand AdditionalDetails\n),\n(\nAuditLogs\n| where OperationName =~ \"Set domain authentication\"\n//| where Result =~ \"success\"   // commenting out, as it may be interesting to capture failed attempts\n| mv-expand TargetResources\n| extend modifiedProperties = parse_json(TargetResources).modifiedProperties\n| mv-expand modifiedProperties\n| extend targetDisplayName = tostring(parse_json(modifiedProperties).displayName), NewDomainValue=tostring(parse_json(modifiedProperties).newValue)\n| where NewDomainValue has \"Federated\"\n)\n)\n| extend UserAgent = iff(AdditionalDetails.key == \"User-Agent\",tostring(AdditionalDetails.value),\"\")\n| extend InitiatingUserOrApp = iff(isnotempty(InitiatedBy.user.userPrincipalName),tostring(InitiatedBy.user.userPrincipalName), tostring(InitiatedBy.app.displayName))\n| extend InitiatingIpAddress = iff(isnotempty(InitiatedBy.user.ipAddress), tostring(InitiatedBy.user.ipAddress), tostring(InitiatedBy.app.ipAddress))\n| project-reorder TimeGenerated, OperationName, InitiatingUserOrApp, AADOperationType, targetDisplayName, Result, InitiatingIpAddress, UserAgent, CorrelationId, TenantId, AADTenantId\n| extend timestamp = TimeGenerated, AccountCustomEntity = InitiatingUserOrApp, IPCustomEntity = InitiatingIpAddress","suppressionDuration":"PT5H","suppressionEnabled":false,"tactics":["CredentialAccess"],"displayName":"Modified domain federation trust settings","enabled":true,"description":"This will alert when a user or application modifies the federation settings on the domain or Update domain authentication from Managed to Federated.\nFor example, this alert will trigger when a new Active Directory Federated Service (ADFS) TrustedRealm object, such as a signing certificate, is added to the domain.\nModification to domain federation settings should be rare. Confirm the added or modified target domain/URL is legitimate administrator behavior.\nTo understand why an authorized user may update settings for a federated domain in Office 365, Azure, or Intune, see: https://docs.microsoft.com/office365/troubleshoot/active-directory/update-federated-domain-office-365.\nFor details on security realms that accept security tokens, see the ADFS Proxy Protocol (MS-ADFSPP) specification: https://docs.microsoft.com/openspecs/windows_protocols/ms-adfspp/e7b9ea73-1980-4318-96a6-da559486664b.\nFor further information on AuditLogs please see https://docs.microsoft.com/azure/active-directory/reports-monitoring/reference-audit-activities.","alertRuleTemplateName":"95dc4ae3-e0f2-48bd-b996-cdd22b90f9af","lastModifiedUtc":"2022-03-14T17:25:53.2026981Z"}},{"id":"/subscriptions/1c61ccbf-70b3-45a3-a1fb-848ce46d70a6/resourceGroups/cxe-malowe/providers/Microsoft.OperationalInsights/workspaces/malowe2/providers/Microsoft.SecurityInsights/alertRules/d087ec83-c2bd-447d-8171-dd35d407c852","name":"d087ec83-c2bd-447d-8171-dd35d407c852","etag":"\"09004291-0000-0100-0000-622f7b060000\"","type":"Microsoft.SecurityInsights/alertRules","kind":"Scheduled","properties":{"incidentConfiguration":{"createIncident":true,"groupingConfiguration":{"enabled":false,"reopenClosedIncident":false,"lookbackDuration":"PT5H","matchingMethod":"AllEntities","groupByEntities":[],"groupByAlertDetails":[],"groupByCustomDetails":[]}},"entityMappings":[{"entityType":"Account","fieldMappings":[{"identifier":"FullName","columnName":"AccountCustomEntity"}]},{"entityType":"Host","fieldMappings":[{"identifier":"FullName","columnName":"HostCustomEntity"}]},{"entityType":"IP","fieldMappings":[{"identifier":"Address","columnName":"IPCustomEntity"}]},{"entityType":"DNS","fieldMappings":[{"identifier":"DomainName","columnName":"DNSName"}]}],"templateVersion":"1.3.0","queryFrequency":"PT6H","queryPeriod":"PT6H","triggerOperator":"GreaterThan","triggerThreshold":0,"eventGroupingSettings":{"aggregationKind":"SingleAlert"},"severity":"High","query":"let domains = dynamic([\"incomeupdate.com\",\"zupertech.com\",\"databasegalore.com\",\"panhardware.com\",\"avsvmcloud.com\",\"digitalcollege.org\",\"freescanonline.com\",\"deftsecurity.com\",\"thedoccloud.com\",\"virtualdataserver.com\",\"lcomputers.com\",\"webcodez.com\",\"globalnetworkissues.com\",\"kubecloud.com\",\"seobundlekit.com\",\"solartrackingsystem.net\",\"virtualwebdata.com\"]);\n(union isfuzzy=true\n(CommonSecurityLog \n  | parse Message with * '(' DNSName ')' * \n  | where DNSName in~ (domains) or DestinationHostName has_any (domains) or RequestURL has_any(domains)\n  | extend AccountCustomEntity = SourceUserID, HostCustomEntity = DeviceName, IPCustomEntity = SourceIP\n  ),\n(DnsEvents \n  | extend DNSName = Name\n  | where isnotempty(DNSName)\n  | where DNSName has_any (domains)\n  | extend IPCustomEntity = ClientIP\n  ),\n(imDns (domain_has_any=domains)\n  | extend DNSName = DnsQuery\n  | extend IPCustomEntity = SrcIpAddr\n  ),\n(VMConnection \n  | parse RemoteDnsCanonicalNames with * '[\"' DNSName '\"]' *\n  | where isnotempty(DNSName)\n  | where DNSName in~ (domains)\n  | extend IPCustomEntity = RemoteIp\n  ),\n(DeviceNetworkEvents \n  | where isnotempty(RemoteUrl) \n  | where RemoteUrl  has_any (domains)  \n  | extend DNSName = RemoteUrl\n  | extend IPCustomEntity = RemoteIP \n  | extend HostCustomEntity = DeviceName \n  ),\n(AzureDiagnostics\n  | where ResourceType == \"AZUREFIREWALLS\"\n  | where Category == \"AzureFirewallDnsProxy\"\n  | parse msg_s with \"DNS Request: \" ClientIP \":\" ClientPort \" - \" QueryID \" \" Request_Type \" \" Request_Class \" \" Request_Name \". \" Request_Protocol \" \" Request_Size \" \" EDNSO_DO \" \" EDNS0_Buffersize \" \" Responce_Code \" \" Responce_Flags \" \" Responce_Size \" \" Response_Duration\n  | where Request_Name has_any (domains)  \n  | extend DNSName = Request_Name\n  | extend IPCustomEntity = ClientIP \n  ),\n(AzureDiagnostics \n  | where ResourceType == \"AZUREFIREWALLS\"\n  | where Category == \"AzureFirewallApplicationRule\"\n  | parse msg_s with Protocol 'request from ' SourceHost ':' SourcePort 'to ' DestinationHost ':' DestinationPort '. Action:' Action\n  | where isnotempty(DestinationHost)\n  | where DestinationHost has_any (domains)  \n  | extend DNSName = DestinationHost \n  | extend IPCustomEntity = SourceHost\n  ) \n  )","suppressionDuration":"PT5H","suppressionEnabled":false,"tactics":["CommandAndControl"],"displayName":"Solorigate Network Beacon","enabled":true,"description":"Identifies a match across various data feeds for domains IOCs related to the Solorigate incident.\n References: https://blogs.microsoft.com/on-the-issues/2020/12/13/customers-protect-nation-state-cyberattacks/, \n https://www.fireeye.com/blog/threat-research/2020/12/evasive-attacker-leverages-solarwinds-supply-chain-compromises-with-sunburst-backdoor.html?1","alertRuleTemplateName":"cecdbd4c-4902-403c-8d4b-32eb1efe460b","lastModifiedUtc":"2022-03-14T17:27:34.229893Z"}},{"id":"/subscriptions/1c61ccbf-70b3-45a3-a1fb-848ce46d70a6/resourceGroups/cxe-malowe/providers/Microsoft.OperationalInsights/workspaces/malowe2/providers/Microsoft.SecurityInsights/alertRules/55597fe2-3979-42b1-8969-39926affeb70","name":"55597fe2-3979-42b1-8969-39926affeb70","etag":"\"0900be91-0000-0100-0000-622f7b320000\"","type":"Microsoft.SecurityInsights/alertRules","kind":"Scheduled","properties":{"incidentConfiguration":{"createIncident":true,"groupingConfiguration":{"enabled":false,"reopenClosedIncident":false,"lookbackDuration":"PT5H","matchingMethod":"AllEntities","groupByEntities":[],"groupByAlertDetails":[],"groupByCustomDetails":[]}},"entityMappings":[{"entityType":"URL","fieldMappings":[{"identifier":"Url","columnName":"UrlCustomEntity"}]},{"entityType":"IP","fieldMappings":[{"identifier":"Address","columnName":"IPCustomEntity"}]},{"entityType":"Account","fieldMappings":[{"identifier":"Name","columnName":"AccountCustomEntity"}]}],"templateVersion":"1.0.1","queryFrequency":"P1D","queryPeriod":"P1D","triggerOperator":"GreaterThan","triggerThreshold":0,"eventGroupingSettings":{"aggregationKind":"SingleAlert"},"severity":"High","query":"let UserAgentString = dynamic ([\"${jndi:ldap:/\", \"${jndi:rmi:/\", \"${jndi:ldaps:/\", \"${jndi:dns:/\", \"${jndi:iiop:/\",\"${jndi:\",\"${jndi:nds:/\",\"${jndi:corba/\"]);\nlet UARegex = @'(\\\\$|%24)(\\\\{|%7B)([^jJ]*[jJ])([^nN]*[nN])([^dD]*[dD])([^iI]*[iI])(:|%3A|\\\\$|%24|}|%7D)';\n(union isfuzzy=true\n(OfficeActivity\n| where UserAgent has_any (UserAgentString) or UserAgent matches regex UARegex\n| summarize StartTime = min(TimeGenerated), EndTime = max(TimeGenerated) by UserAgent, SourceIP = ClientIP, Account = UserId, Type, Operation\n| extend timestamp = StartTime, AccountCustomEntity = Account, IPCustomEntity = SourceIP\n),\n(AzureDiagnostics\n| where Category in (\"FrontdoorWebApplicationFirewallLog\", \"FrontdoorAccessLog\", \"ApplicationGatewayFirewallLog\", \"ApplicationGatewayAccessLog\")\n| where userAgent_s has_any (UserAgentString) or userAgent_s matches regex UARegex\n| summarize StartTime = min(TimeGenerated), EndTime = max(TimeGenerated) by UserAgent = userAgent_s, SourceIP = clientIP_s, Type, host_s, requestUri_s, httpStatus_d\n| extend timestamp = StartTime, IPCustomEntity = SourceIP, UrlCustomEntity = requestUri_s\n),\n(\nW3CIISLog\n| where csUserAgent has_any (UserAgentString) or csUserAgent matches regex UARegex\n| summarize StartTime = min(TimeGenerated), EndTime = max(TimeGenerated) by UserAgent = csUserAgent, SourceIP = cIP, Account = csUserName, Type, sSiteName, csMethod, csUriStem\n| extend timestamp = StartTime, AccountCustomEntity = Account, IPCustomEntity = SourceIP, UrlCustomEntity = csUriStem\n),\n(\nAWSCloudTrail\n| where UserAgent has_any (UserAgentString) or UserAgent matches regex UARegex\n| summarize StartTime = min(TimeGenerated), EndTime = max(TimeGenerated) by UserAgent, SourceIP = SourceIpAddress, Account = UserIdentityUserName, Type, EventName\n| extend timestamp = StartTime, AccountCustomEntity = Account, IPCustomEntity = SourceIP\n),\n(SigninLogs\n| where UserAgent has_any (UserAgentString) or UserAgent matches regex UARegex\n| summarize StartTime = min(TimeGenerated), EndTime = max(TimeGenerated) by UserAgent, SourceIP = IPAddress, Account = UserPrincipalName, Type, Operation = OperationName, tostring(LocationDetails), tostring(DeviceDetail),    AppDisplayName, ClientAppUsed\n| extend timestamp = StartTime, AccountCustomEntity = Account, IPCustomEntity = SourceIP\n),\n(AADNonInteractiveUserSignInLogs \n| where UserAgent has_any (UserAgentString) or UserAgent matches regex UARegex\n| summarize StartTime = min(TimeGenerated), EndTime = max(TimeGenerated) by UserAgent, SourceIP = IPAddress, Account = UserPrincipalName, Type, Operation = OperationName, tostring(LocationDetails), tostring(DeviceDetail), AppDisplayName, ClientAppUsed\n| extend timestamp = StartTime, AccountCustomEntity = Account, IPCustomEntity = SourceIP\n),\n(imWebSession\n| where HttpUserAgent has_any (UserAgentString) or HttpUserAgent matches regex UARegex\n| summarize StartTime = min(TimeGenerated), EndTime = max(TimeGenerated) by HttpUserAgent, SourceIP = SrcIpAddr, DstIpAddr, Account = SrcUsername, Type\n| extend timestamp = StartTime, AccountCustomEntity = Account, IPCustomEntity = SourceIP\n)\n)","suppressionDuration":"PT5H","suppressionEnabled":false,"tactics":["InitialAccess"],"displayName":"User agent search for log4j exploitation attempt","enabled":true,"description":"This query uses various log sources having user agent data to look for log4j CVE-2021-44228 exploitation attempt based on user agent pattern. Log4j is an open-source Apache logging library that is used in \n many Java-based applications. The regex and the string matching look for the most common attacks. This might not be comprehensive to detect every possible user agent variation.\n Reference: https://msrc-blog.microsoft.com/2021/12/11/microsofts-response-to-cve-2021-44228-apache-log4j2/","alertRuleTemplateName":"29283b22-a1c0-4d16-b0a9-3460b655a46a","lastModifiedUtc":"2022-03-14T17:28:17.761253Z"}},{"id":"/subscriptions/1c61ccbf-70b3-45a3-a1fb-848ce46d70a6/resourceGroups/cxe-malowe/providers/Microsoft.OperationalInsights/workspaces/malowe2/providers/Microsoft.SecurityInsights/alertRules/922da1d0-ddc3-4313-a83b-a3948b897ff0","name":"922da1d0-ddc3-4313-a83b-a3948b897ff0","etag":"\"09001d92-0000-0100-0000-622f7b510000\"","type":"Microsoft.SecurityInsights/alertRules","kind":"Scheduled","properties":{"incidentConfiguration":{"createIncident":true,"groupingConfiguration":{"enabled":false,"reopenClosedIncident":false,"lookbackDuration":"PT5H","matchingMethod":"AllEntities","groupByEntities":[],"groupByAlertDetails":[],"groupByCustomDetails":[]}},"entityMappings":[{"entityType":"Account","fieldMappings":[{"identifier":"FullName","columnName":"AccountCustomEntity"}]},{"entityType":"IP","fieldMappings":[{"identifier":"Address","columnName":"IPCustomEntity"}]}],"templateVersion":"1.1.0","queryFrequency":"PT1H","queryPeriod":"PT1H","triggerOperator":"GreaterThan","triggerThreshold":0,"eventGroupingSettings":{"aggregationKind":"SingleAlert"},"severity":"High","query":"AuditLogs\n| where OperationName has_any (\"Add service principal\", \"Certificates and secrets management\") // captures \"Add service principal\", \"Add service principal credentials\", and \"Update application - Certificates and secrets management\" events\n| where Result =~ \"success\"\n| where tostring(InitiatedBy.user.userPrincipalName) has \"@\" or tostring(InitiatedBy.app.displayName) has \"@\"\n| extend targetDisplayName = tostring(TargetResources[0].displayName)\n| extend targetId = tostring(TargetResources[0].id)\n| extend targetType = tostring(TargetResources[0].type)\n| extend keyEvents = TargetResources[0].modifiedProperties\n| mv-expand keyEvents\n| where keyEvents.displayName =~ \"KeyDescription\"\n| extend new_value_set = parse_json(tostring(keyEvents.newValue))\n| extend old_value_set = parse_json(tostring(keyEvents.oldValue))\n| where old_value_set == \"[]\"\n| parse new_value_set with * \"KeyIdentifier=\" keyIdentifier:string \",KeyType=\" keyType:string \",KeyUsage=\" keyUsage:string \",DisplayName=\" keyDisplayName:string \"]\" *\n| where keyUsage == \"Verify\"  or keyUsage == \"\"\n| extend UserAgent = iff(AdditionalDetails[0].key == \"User-Agent\",tostring(AdditionalDetails[0].value),\"\")\n| extend InitiatingUserOrApp = iff(isnotempty(InitiatedBy.user.userPrincipalName),tostring(InitiatedBy.user.userPrincipalName), tostring(InitiatedBy.app.displayName))\n| extend InitiatingIpAddress = iff(isnotempty(InitiatedBy.user.ipAddress), tostring(InitiatedBy.user.ipAddress), tostring(InitiatedBy.app.ipAddress))\n// The below line is currently commented out but Microsoft Sentinel users can modify this query to show only Application or only Service Principal events in their environment\n//| where targetType =~ \"Application\" // or targetType =~ \"ServicePrincipal\"\n| project-away new_value_set, old_value_set\n| project-reorder TimeGenerated, OperationName, InitiatingUserOrApp, InitiatingIpAddress, UserAgent, targetDisplayName, targetId, targetType, keyDisplayName, keyType, keyUsage, keyIdentifier, CorrelationId, TenantId\n| extend timestamp = TimeGenerated, AccountCustomEntity = InitiatingUserOrApp, IPCustomEntity = InitiatingIpAddress","suppressionDuration":"PT5H","suppressionEnabled":false,"tactics":["DefenseEvasion"],"displayName":"First access credential added to Application or Service Principal where no credential was present","enabled":true,"description":"This will alert when an admin or app owner account adds a new credential to an Application or Service Principal where there was no previous verify KeyCredential associated.\nIf a threat actor obtains access to an account with sufficient privileges and adds the alternate authentication material triggering this event, the threat actor can now authenticate as the Application or Service Principal using this credential.\nAdditional information on OAuth Credential Grants can be found in RFC 6749 Section 4.4 or https://docs.microsoft.com/azure/active-directory/develop/v2-oauth2-client-creds-grant-flow\nFor further information on AuditLogs please see https://docs.microsoft.com/azure/active-directory/reports-monitoring/reference-audit-activities.","alertRuleTemplateName":"2cfc3c6e-f424-4b88-9cc9-c89f482d016a","lastModifiedUtc":"2022-03-14T17:28:48.5351815Z"}},{"id":"/subscriptions/1c61ccbf-70b3-45a3-a1fb-848ce46d70a6/resourceGroups/cxe-malowe/providers/Microsoft.OperationalInsights/workspaces/malowe2/providers/Microsoft.SecurityInsights/alertRules/84899c32-1adf-43a7-8d22-b31f8f15cb7a","name":"84899c32-1adf-43a7-8d22-b31f8f15cb7a","etag":"\"09008892-0000-0100-0000-622f7b790000\"","type":"Microsoft.SecurityInsights/alertRules","kind":"Scheduled","properties":{"incidentConfiguration":{"createIncident":true,"groupingConfiguration":{"enabled":false,"reopenClosedIncident":false,"lookbackDuration":"PT5H","matchingMethod":"AllEntities","groupByEntities":[],"groupByAlertDetails":[],"groupByCustomDetails":[]}},"entityMappings":[{"entityType":"Account","fieldMappings":[{"identifier":"FullName","columnName":"AccountCustomEntity"}]},{"entityType":"IP","fieldMappings":[{"identifier":"Address","columnName":"IPCustomEntity"}]}],"templateVersion":"1.0.0","queryFrequency":"P1D","queryPeriod":"P14D","triggerOperator":"GreaterThan","triggerThreshold":0,"eventGroupingSettings":{"aggregationKind":"SingleAlert"},"severity":"High","query":"let detectionTime = 1d;\nlet joinLookback = 14d;\nAuditLogs\n| where TimeGenerated > ago(detectionTime)\n| where LoggedByService =~ \"Core Directory\"\n| where Category =~ \"ApplicationManagement\"\n| where OperationName =~ \"Consent to application\"\n| where TargetResources has \"mailboxsettings\"\n| extend AppDisplayName = TargetResources.[0].displayName\n| extend AppClientId = tolower(TargetResources.[0].id)\n| where AppClientId !in ((externaldata(knownAppClientId:string, knownAppDisplayName:string)[@\"https://raw.githubusercontent.com/Azure/Azure-Sentinel/master/Sample%20Data/Feeds/Microsoft.OAuth.KnownApplications.csv\"] with (format=\"csv\")))\n| extend ConsentFull = TargetResources[0].modifiedProperties[4].newValue\n| parse ConsentFull with * \"ConsentType: \" GrantConsentType \", Scope: \" GrantScope1 \"]\" *\n| where ConsentFull contains \"contacts.read\" and ConsentFull contains \"user.read\" and ConsentFull contains \"mail.read\" and ConsentFull contains \"notes.read.all\" and ConsentFull contains \"mailboxsettings.readwrite\" and ConsentFull contains \"Files.ReadWrite.All\"\n| where GrantConsentType != \"AllPrincipals\" // NOTE: we are ignoring if OAuth application was granted to all users via an admin - but admin due diligence should be audited occasionally\n| extend GrantIpAddress = iff(isnotempty(InitiatedBy.user.ipAddress), tostring(InitiatedBy.user.ipAddress), tostring(InitiatedBy.app.ipAddress))\n| extend GrantInitiatedBy = iff(isnotempty(InitiatedBy.user.userPrincipalName), tostring(InitiatedBy.user.userPrincipalName), tostring(InitiatedBy.app.displayName))\n| extend GrantUserAgent = iff(AdditionalDetails[0].key =~ \"User-Agent\", tostring(AdditionalDetails[0].value), \"\")\n| project TimeGenerated, GrantConsentType, GrantScope1, GrantInitiatedBy, AppDisplayName, GrantIpAddress, GrantUserAgent, AppClientId, OperationName, ConsentFull, CorrelationId\n| join kind = leftouter (AuditLogs\n| where TimeGenerated > ago(joinLookback)\n| where LoggedByService =~ \"Core Directory\"\n| where Category =~ \"ApplicationManagement\"\n| where OperationName =~ \"Add service principal\"\n| extend AppClientId = tolower(TargetResources[0].id)\n| extend AppReplyURLs = iff(TargetResources[0].modifiedProperties[1].newValue has \"AddressType\", TargetResources[0].modifiedProperties[1].newValue, \"\")\n| distinct AppClientId, tostring(AppReplyURLs)\n)\non AppClientId\n| join kind = innerunique (AuditLogs\n| where TimeGenerated > ago(joinLookback)\n| where LoggedByService =~ \"Core Directory\"\n| where Category =~ \"ApplicationManagement\"\n| where OperationName =~ \"Add OAuth2PermissionGrant\" or OperationName =~ \"Add delegated permission grant\"\n| extend GrantAuthentication = tostring(TargetResources[0].displayName)\n| extend GrantOperation = OperationName\n| project GrantAuthentication, GrantOperation, CorrelationId\n) on CorrelationId\n| project TimeGenerated, GrantConsentType, GrantScope1, GrantInitiatedBy, AppDisplayName, AppReplyURLs, GrantIpAddress, GrantUserAgent, AppClientId, GrantAuthentication, OperationName, GrantOperation, CorrelationId, ConsentFull\n| extend timestamp = TimeGenerated, AccountCustomEntity = GrantInitiatedBy, IPCustomEntity = GrantIpAddress","suppressionDuration":"PT5H","suppressionEnabled":false,"tactics":["CredentialAccess","DefenseEvasion"],"displayName":"Suspicious application consent similar to O365 Attack Toolkit","enabled":true,"description":"This will alert when a user consents to provide a previously-unknown Azure application with the same OAuth permissions used by the MDSec O365 Attack Toolkit (https://github.com/mdsecactivebreach/o365-attack-toolkit).\nThe default permissions/scope for the MDSec O365 Attack toolkit are contacts.read, user.read, mail.read, notes.read.all, mailboxsettings.readwrite, and files.readwrite.all.\nConsent to applications with these permissions should be rare, especially as the knownApplications list is expanded, especially as the knownApplications list is expanded. Public contributions to expand this filter are welcome!\nFor further information on AuditLogs please see https://docs.microsoft.com/azure/active-directory/reports-monitoring/reference-audit-activities.","alertRuleTemplateName":"f948a32f-226c-4116-bddd-d95e91d97eb9","lastModifiedUtc":"2022-03-14T17:29:28.6916157Z"}},{"id":"/subscriptions/1c61ccbf-70b3-45a3-a1fb-848ce46d70a6/resourceGroups/cxe-malowe/providers/Microsoft.OperationalInsights/workspaces/malowe2/providers/Microsoft.SecurityInsights/alertRules/3873cecc-cd5c-48ce-b59b-3c8dfdff0a87","name":"3873cecc-cd5c-48ce-b59b-3c8dfdff0a87","etag":"\"0900ce92-0000-0100-0000-622f7b940000\"","type":"Microsoft.SecurityInsights/alertRules","kind":"Scheduled","properties":{"incidentConfiguration":{"createIncident":true,"groupingConfiguration":{"enabled":false,"reopenClosedIncident":false,"lookbackDuration":"PT5H","matchingMethod":"AllEntities","groupByEntities":[],"groupByAlertDetails":[],"groupByCustomDetails":[]}},"entityMappings":[{"entityType":"Account","fieldMappings":[{"identifier":"FullName","columnName":"AccountCustomEntity"}]},{"entityType":"Host","fieldMappings":[{"identifier":"FullName","columnName":"HostCustomEntity"}]},{"entityType":"IP","fieldMappings":[{"identifier":"Address","columnName":"IPCustomEntity"}]},{"entityType":"FileHash","fieldMappings":[{"identifier":"Algorithm","columnName":"AlgorithmCustomEntity"},{"identifier":"Value","columnName":"FileHashCustomEntity"}]},{"entityType":"Process","fieldMappings":[{"identifier":"ProcessId","columnName":"ProcessCustomEntity"}]}],"templateVersion":"2.0.1","queryFrequency":"PT6H","queryPeriod":"PT6H","triggerOperator":"GreaterThan","triggerThreshold":0,"eventGroupingSettings":{"aggregationKind":"SingleAlert"},"severity":"High","query":"let iocs = externaldata(DateAdded:string,IoC:string,Type:string,TLP:string) [@\"https://raw.githubusercontent.com/Azure/Azure-Sentinel/master/Sample%20Data/Feeds/FoggyWebIOC.csv\"] with (format=\"csv\", ignoreFirstRecord=True);\nlet sha256Hashes = (iocs | where Type == \"sha256\" | project IoC);\nlet FilePaths = (iocs | where Type =~ \"FilePath\" | project IoC);\nlet POST_URI = (iocs | where Type =~ \"URI1\" | project IoC);\nlet GET_URI = (iocs | where Type =~ \"URI2\" | project IoC);\n//Include in the list below, the ADFS servers you know about in your environment.  In the next part of the query, we will try to identify them for you if you have the telemetry.\nlet ADFS_Servers1 = datatable(Computer:string)\n[ \"<ADFS01>.<DOMAIN>.<COM>\",\n\"<ADFS02>.<DOMAIN>.<COM>\"\n];\n// Automatically identify potential ADFS services in your environment by searching process event telemetry for \"Microsoft.IdentityServer.ServiceHost.exe\".\nlet ADFS_Servers2 = \n(union isfuzzy=true\n(SecurityEvent\n| where EventID == 4688 and SubjectLogonId != \"0x3e4\"\n| where ProcessName has \"Microsoft.IdentityServer.ServiceHost.exe\"\n| distinct Computer\n),\n(DeviceProcessEvents\n| where InitiatingProcessFileName == 'Microsoft.IdentityServer.ServiceHost.exe'\n| extend Computer = DeviceName\n| distinct Computer\n),\n(Event\n| where Source == \"Microsoft-Windows-Sysmon\"\n| where EventID == 1\n| extend EventData = parse_xml(EventData).DataItem.EventData.Data\n| mv-expand bagexpansion=array EventData\n| evaluate bag_unpack(EventData)\n| extend Key=tostring(['@Name']), Value=['#text']\n| evaluate pivot(Key, any(Value), TimeGenerated, Source, EventLog, Computer, EventLevel, EventLevelName, UserName, RenderedDescription, MG, ManagementGroupName, Type, _ResourceId)\n| extend process = split(Image, '\\\\', -1)[-1]\n| where process =~ \"Microsoft.IdentityServer.ServiceHost.exe\"\n| distinct Computer\n)\n);\nlet ADFS_Servers =\nADFS_Servers1\n| union  (ADFS_Servers2 | distinct Computer);\n(union isfuzzy=true\n(DeviceNetworkEvents\n| where DeviceName in (ADFS_Servers)\n| where isnotempty(InitiatingProcessSHA256) or isnotempty(InitiatingProcessFolderPath)\n| where  InitiatingProcessSHA256 has_any (sha256Hashes) or InitiatingProcessFolderPath has_any (FilePaths)\n| project TimeGenerated, ActionType, DeviceId, DeviceName, InitiatingProcessAccountDomain, InitiatingProcessAccountName, InitiatingProcessCommandLine, InitiatingProcessFolderPath, InitiatingProcessId,  InitiatingProcessParentFileName, InitiatingProcessFileName, RemoteIP, RemoteUrl, RemotePort, LocalIP, Type\n| extend timestamp = TimeGenerated, IPCustomEntity = RemoteIP, HostCustomEntity = DeviceName\n),\n(Event\n| where Source == \"Microsoft-Windows-Sysmon\" and EventID == '7'\n| where Computer in (ADFS_Servers)\n| extend EvData = parse_xml(EventData)\n| extend EventDetail = EvData.DataItem.EventData.Data\n| extend ImageLoaded = EventDetail.[5].[\"#text\"], Hashes = EventDetail.[11].[\"#text\"]\n| parse Hashes with * 'SHA256=' SHA256 '\",' *\n| where ImageLoaded has_any (FilePaths) or SHA256 has_any (sha256Hashes) \n| project TimeGenerated, EventDetail, UserName, Computer, Type, Source, SHA256, ImageLoaded, EventID\n| extend Type = strcat(Type,\":\",EventID, \": \", Source), Account = UserName, FileHash = SHA256, Image = EventDetail.[4].[\"#text\"] \n| extend timestamp = TimeGenerated, HostCustomEntity = Computer , AccountCustomEntity = Account, ProcessCustomEntity = tostring(split(Image, '\\\\', -1)[-1]), AlgorithmCustomEntity = \"SHA256\", FileHashCustomEntity = FileHash\n),\n(CommonSecurityLog\n| where FileHash in (sha256Hashes)\n| project TimeGenerated,  Message, SourceUserID, FileHash, Type\n| extend timestamp = TimeGenerated, AlgorithmCustomEntity = \"SHA256\", FileHashCustomEntity = FileHash\n),\n(DeviceEvents\n| where DeviceName in (ADFS_Servers)\n| extend FilePath = strcat(FolderPath, '\\\\', FileName)\n| where InitiatingProcessSHA256 has_any (sha256Hashes) or FilePath has_any (FilePaths)\n| project TimeGenerated, ActionType, DeviceId, DeviceName, InitiatingProcessAccountDomain, InitiatingProcessAccountName, InitiatingProcessCommandLine, InitiatingProcessFolderPath, InitiatingProcessId, InitiatingProcessParentFileName, InitiatingProcessFileName, InitiatingProcessSHA256, Type\n| extend Account = InitiatingProcessAccountName, Computer = DeviceName, CommandLine = InitiatingProcessCommandLine, FileHash = InitiatingProcessSHA256, Image = InitiatingProcessFolderPath\n| extend timestamp = TimeGenerated, HostCustomEntity = Computer , AccountCustomEntity = Account, ProcessCustomEntity = InitiatingProcessFileName, AlgorithmCustomEntity = \"SHA256\", FileHashCustomEntity = FileHash\n),\n(DeviceFileEvents\n| where DeviceName in (ADFS_Servers)\n| where FolderPath has_any (FilePaths) or SHA256 has_any (sha256Hashes)\n| project TimeGenerated, ActionType, DeviceId, DeviceName, InitiatingProcessAccountDomain, InitiatingProcessAccountName, InitiatingProcessCommandLine, InitiatingProcessFolderPath, InitiatingProcessId, InitiatingProcessParentFileName, InitiatingProcessFileName, InitiatingProcessSHA256, Type\n| extend Account = InitiatingProcessAccountName, Computer = DeviceName, CommandLine = InitiatingProcessCommandLine, FileHash = InitiatingProcessSHA256, Image = InitiatingProcessFolderPath\n| extend timestamp = TimeGenerated, HostCustomEntity = Computer , AccountCustomEntity = Account, ProcessCustomEntity = InitiatingProcessFileName, AlgorithmCustomEntity = \"SHA256\", FileHashCustomEntity = FileHash\n),\n(DeviceImageLoadEvents\n| where DeviceName in (ADFS_Servers)\n| where FolderPath has_any (FilePaths) or SHA256 has_any (sha256Hashes)\n| project TimeGenerated, ActionType, DeviceId, DeviceName, InitiatingProcessAccountDomain, InitiatingProcessAccountName, InitiatingProcessCommandLine, InitiatingProcessFolderPath, InitiatingProcessId, InitiatingProcessParentFileName, InitiatingProcessFileName, InitiatingProcessSHA256, Type\n| extend Account = InitiatingProcessAccountName, Computer = DeviceName, CommandLine = InitiatingProcessCommandLine, FileHash = InitiatingProcessSHA256, Image = InitiatingProcessFolderPath\n| extend timestamp = TimeGenerated, HostCustomEntity = Computer , AccountCustomEntity = Account, ProcessCustomEntity = InitiatingProcessFileName, AlgorithmCustomEntity = \"SHA256\", FileHashCustomEntity = FileHash\n),\n(Event\n| where Source == \"Microsoft-Windows-Sysmon\"\n| where Computer in (ADFS_Servers)\n| extend EvData = parse_xml(EventData)\n| extend EventDetail = EvData.DataItem.EventData.Data\n| parse EventDetail with * 'SHA256=' SHA256 '\",' *\n| where EventDetail has_any (sha256Hashes) \n| project TimeGenerated, EventDetail, UserName, Computer, Type, Source, SHA256\n| extend Type = strcat(Type, \": \", Source), Account = UserName, FileHash = SHA256, Image = EventDetail.[4].[\"#text\"] \n| extend timestamp = TimeGenerated, HostCustomEntity = Computer , AccountCustomEntity = Account, ProcessCustomEntity = tostring(split(Image, '\\\\', -1)[-1]), AlgorithmCustomEntity = \"SHA256\", FileHashCustomEntity = FileHash\n),\n(W3CIISLog \n| where ( csMethod == 'GET' and csUriStem has_any (GET_URI)) or (csMethod == 'POST' and csUriStem has_any (POST_URI))\n| summarize StartTime = max(TimeGenerated), EndTime = min(TimeGenerated), cIP_MethodCount = count() \nby cIP, cIP_MethodCountType = \"Count of repeated entries, this is to reduce rowsets returned\", csMethod, \ncsHost, scStatus, sIP, csUriStem, csUriQuery, csUserName, csUserAgent, csCookie, csReferer\n| extend timestamp = StartTime, IPCustomEntity = cIP, HostCustomEntity = csHost, AccountCustomEntity = csUserName\n),\n(imFileEvent\n| where DvcHostname in (ADFS_Servers)\n| where TargetFileSHA256 has_any (sha256Hashes) or FilePath has_any (FilePaths)\n| extend Account = ActorUsername, Computer = DvcHostname, IPAddress = SrcIpAddr, CommandLine = ActingProcessCommandLine, FileHash = TargetFileSHA256\n| project Type, TimeGenerated, Computer, Account, IPAddress, CommandLine, FileHash\n)\n)","suppressionDuration":"PT5H","suppressionEnabled":false,"tactics":["Collection"],"displayName":"NOBELIUM IOCs related to FoggyWeb backdoor","enabled":true,"description":"Identifies a match across various data feeds for IOCs related to FoggyWeb backdoor by the threat actor NOBELIUM.\n FoggyWeb is a passive and highly targeted backdoor capable of remotely exfiltrating sensitive information from a compromised AD FS server.\n It can also receive additional malicious components from a command-and-control (C2) server and execute them on the compromised server.\n Reference: https://aka.ms/nobelium-foggy-web","alertRuleTemplateName":"c37711a4-5f44-4472-8afc-0679bc0ef966","lastModifiedUtc":"2022-03-14T17:29:55.8542887Z"}}]]}